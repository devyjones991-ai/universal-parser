import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from typing import List, Dict, Any, Optional
from datetime import datetime, timedelta
import io
import json
from db import get_price_history, get_user_tracked_items, TrackedItem, PriceHistory
import logging

logger = logging.getLogger(__name__)

class AnalyticsService:
    """–°–µ—Ä–≤–∏—Å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏ –æ—Ç—á–µ—Ç–æ–≤"""
    
    def __init__(self):
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
        plt.style.use('seaborn-v0_8')
        sns.set_palette("husl")
    
    def get_price_trends(self, user_id: int, days: int = 30) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç—Ä–µ–Ω–¥—ã —Ü–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            tracked_items = get_user_tracked_items(user_id)
            trends = {}
            
            for item in tracked_items:
                price_history = get_price_history(user_id, item.id, days)
                
                if not price_history:
                    continue
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–Ω–¥
                prices = [ph.price for ph in price_history]
                dates = [ph.timestamp for ph in price_history]
                
                if len(prices) < 2:
                    continue
                
                # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                current_price = prices[0]
                min_price = min(prices)
                max_price = max(prices)
                avg_price = sum(prices) / len(prices)
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç—Ä–µ–Ω–¥
                price_change = current_price - prices[-1] if len(prices) > 1 else 0
                price_change_percent = (price_change / prices[-1] * 100) if prices[-1] > 0 else 0
                
                trends[item.name] = {
                    "item_id": item.id,
                    "marketplace": item.marketplace,
                    "current_price": current_price,
                    "min_price": min_price,
                    "max_price": max_price,
                    "avg_price": avg_price,
                    "price_change": price_change,
                    "price_change_percent": price_change_percent,
                    "data_points": len(prices),
                    "trend": "up" if price_change > 0 else "down" if price_change < 0 else "stable"
                }
            
            return trends
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return {}
    
    def create_price_chart(self, user_id: int, tracked_item_id: int, days: int = 30) -> bytes:
        """–°–æ–∑–¥–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã"""
        try:
            price_history = get_price_history(user_id, tracked_item_id, days)
            
            if not price_history:
                return None
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            dates = [ph.timestamp for ph in price_history]
            prices = [ph.price for ph in price_history]
            
            # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
            fig, ax = plt.subplots(figsize=(12, 6))
            
            ax.plot(dates, prices, marker='o', linewidth=2, markersize=4)
            ax.set_title(f'–î–∏–Ω–∞–º–∏–∫–∞ —Ü–µ–Ω—ã –∑–∞ {days} –¥–Ω–µ–π', fontsize=14, fontweight='bold')
            ax.set_xlabel('–î–∞—Ç–∞', fontsize=12)
            ax.set_ylabel('–¶–µ–Ω–∞ (‚ÇΩ)', fontsize=12)
            ax.grid(True, alpha=0.3)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Å–∏
            ax.tick_params(axis='x', rotation=45)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–π—Ç—ã
            buffer = io.BytesIO()
            plt.savefig(buffer, format='png', dpi=300, bbox_inches='tight')
            buffer.seek(0)
            plt.close()
            
            return buffer.getvalue()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {tracked_item_id}: {e}")
            return None
    
    def generate_analytics_report(self, user_id: int, days: int = 30) -> Dict[str, Any]:
        """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç"""
        try:
            trends = self.get_price_trends(user_id, days)
            tracked_items = get_user_tracked_items(user_id)
            
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            total_items = len(tracked_items)
            active_trends = len(trends)
            
            # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤
            up_trends = sum(1 for t in trends.values() if t["trend"] == "up")
            down_trends = sum(1 for t in trends.values() if t["trend"] == "down")
            stable_trends = sum(1 for t in trends.values() if t["trend"] == "stable")
            
            # –¢–æ–ø –∏–∑–º–µ–Ω–µ–Ω–∏–π
            top_changes = sorted(
                trends.values(),
                key=lambda x: abs(x["price_change_percent"]),
                reverse=True
            )[:5]
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            recommendations = self._generate_recommendations(trends)
            
            report = {
                "period_days": days,
                "total_items": total_items,
                "active_trends": active_trends,
                "trends_summary": {
                    "up": up_trends,
                    "down": down_trends,
                    "stable": stable_trends
                },
                "top_changes": top_changes,
                "recommendations": recommendations,
                "generated_at": datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')
            }
            
            return report
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return {}
    
    def _generate_recommendations(self, trends: Dict[str, Any]) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–µ–Ω–¥–æ–≤"""
        recommendations = []
        
        if not trends:
            return ["–î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"]
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–Ω–¥—ã
        up_trends = [t for t in trends.values() if t["trend"] == "up"]
        down_trends = [t for t in trends.values() if t["trend"] == "down"]
        
        if up_trends:
            avg_increase = sum(t["price_change_percent"] for t in up_trends) / len(up_trends)
            recommendations.append(
                f"üìà {len(up_trends)} —Ç–æ–≤–∞—Ä–æ–≤ —Ä–∞—Å—Ç—É—Ç –≤ —Ü–µ–Ω–µ (—Å—Ä–µ–¥–Ω–∏–π —Ä–æ—Å—Ç: {avg_increase:.1f}%)"
            )
        
        if down_trends:
            avg_decrease = sum(t["price_change_percent"] for t in down_trends) / len(down_trends)
            recommendations.append(
                f"üìâ {len(down_trends)} —Ç–æ–≤–∞—Ä–æ–≤ –ø–∞–¥–∞—é—Ç –≤ —Ü–µ–Ω–µ (—Å—Ä–µ–¥–Ω–µ–µ –ø–∞–¥–µ–Ω–∏–µ: {avg_decrease:.1f}%)"
            )
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º —Ç–æ–≤–∞—Ä–∞–º
        for name, trend in trends.items():
            if trend["price_change_percent"] > 20:
                recommendations.append(
                    f"üö® {name}: —Ü–µ–Ω–∞ –≤—ã—Ä–æ—Å–ª–∞ –Ω–∞ {trend['price_change_percent']:.1f}% - —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –ø–æ–∫—É–ø–∫—É"
                )
            elif trend["price_change_percent"] < -20:
                recommendations.append(
                    f"üí∞ {name}: —Ü–µ–Ω–∞ —É–ø–∞–ª–∞ –Ω–∞ {abs(trend['price_change_percent']):.1f}% - —Ö–æ—Ä–æ—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–∫—É–ø–∫–∏"
                )
        
        return recommendations[:5]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    
    def export_to_excel(self, user_id: int, days: int = 30) -> bytes:
        """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ Excel"""
        try:
            tracked_items = get_user_tracked_items(user_id)
            
            # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ª–∏—Å—Ç–∞–º–∏
            buffer = io.BytesIO()
            
            with pd.ExcelWriter(buffer, engine='openpyxl') as writer:
                # –õ–∏—Å—Ç —Å –æ–±—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
                items_data = []
                for item in tracked_items:
                    price_history = get_price_history(user_id, item.id, days)
                    
                    current_price = item.current_price or 0
                    min_price = min([ph.price for ph in price_history]) if price_history else current_price
                    max_price = max([ph.price for ph in price_history]) if price_history else current_price
                    
                    items_data.append({
                        "–ù–∞–∑–≤–∞–Ω–∏–µ": item.name,
                        "–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å": item.marketplace.upper(),
                        "–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞": current_price,
                        "–ú–∏–Ω. —Ü–µ–Ω–∞": min_price,
                        "–ú–∞–∫—Å. —Ü–µ–Ω–∞": max_price,
                        "–°—Å—ã–ª–∫–∞": item.url,
                        "–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ": item.last_updated.strftime('%Y-%m-%d %H:%M:%S')
                    })
                
                df_items = pd.DataFrame(items_data)
                df_items.to_excel(writer, sheet_name='–¢–æ–≤–∞—Ä—ã', index=False)
                
                # –õ–∏—Å—Ç —Å –∏—Å—Ç–æ—Ä–∏–µ–π —Ü–µ–Ω
                all_history = []
                for item in tracked_items:
                    price_history = get_price_history(user_id, item.id, days)
                    for ph in price_history:
                        all_history.append({
                            "–¢–æ–≤–∞—Ä": item.name,
                            "–î–∞—Ç–∞": ph.timestamp.strftime('%Y-%m-%d %H:%M:%S'),
                            "–¶–µ–Ω–∞": ph.price,
                            "–û—Å—Ç–∞—Ç–æ–∫": ph.stock or 0,
                            "–†–µ–π—Ç–∏–Ω–≥": ph.rating or 0
                        })
                
                if all_history:
                    df_history = pd.DataFrame(all_history)
                    df_history.to_excel(writer, sheet_name='–ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω', index=False)
                
                # –õ–∏—Å—Ç —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π
                trends = self.get_price_trends(user_id, days)
                trends_data = []
                for name, trend in trends.items():
                    trends_data.append({
                        "–¢–æ–≤–∞—Ä": name,
                        "–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞": trend["current_price"],
                        "–ò–∑–º–µ–Ω–µ–Ω–∏–µ (%)": trend["price_change_percent"],
                        "–¢—Ä–µ–Ω–¥": trend["trend"],
                        "–ú–∏–Ω. —Ü–µ–Ω–∞": trend["min_price"],
                        "–ú–∞–∫—Å. —Ü–µ–Ω–∞": trend["max_price"],
                        "–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞": trend["avg_price"]
                    })
                
                if trends_data:
                    df_trends = pd.DataFrame(trends_data)
                    df_trends.to_excel(writer, sheet_name='–ê–Ω–∞–ª–∏—Ç–∏–∫–∞', index=False)
            
            buffer.seek(0)
            return buffer.getvalue()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Excel –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return None

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
analytics_service = AnalyticsService()
