"""–ö–æ–º–∞–Ω–¥—ã Telegram-–±–æ—Ç–∞."""
from __future__ import annotations

import io
import json
from typing import Any, Dict

import pandas as pd
from aiogram import F, types
from aiogram.filters import Command
from aiogram.types import BufferedInputFile

from analytics import UniversalParser
from core import get_recent_results, save_results
from profiles import load_profiles

from .context import bot, dp, settings, task_queue


def is_admin(user_id: int) -> bool:
    return user_id == settings.telegram_chat_id or user_id in settings.admin_chat_ids


async def _handle_parse_url(message: types.Message, url: str) -> None:
    await message.answer(f"üîÑ –ü–∞—Ä—Å–∏–º {url}...")
    async with UniversalParser() as parser:
        results = await parser.parse_url(url)

    if results:
        save_results("manual_parse", results)
        preview = results[:5]
        text = f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(results)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤\n\n"
        text += json.dumps(preview, ensure_ascii=False, indent=2)
        if len(text) > 4000:
            text = text[:3900] + "..."
        await message.answer(f"```{text}```", parse_mode="Markdown")
    else:
        await message.answer("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")


async def _handle_run_profile(message: types.Message, profile_name: str) -> None:
    async with UniversalParser() as parser:
        results = await parser.parse_by_profile(profile_name)

    if results:
        save_results(profile_name, results)
        text = [
            f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å '{profile_name}' –≤—ã–ø–æ–ª–Ω–µ–Ω",
            f"–ù–∞–π–¥–µ–Ω–æ: {len(results)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤",
            "",
        ]
        for i, result in enumerate(results[:3]):
            text.append(f"{i + 1}. {json.dumps(result, ensure_ascii=False)}")
        if len(results) > 3:
            text.append(f"... –∏ –µ—â—ë {len(results) - 3} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        await message.answer("\n".join(text))
    else:
        await message.answer("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")


async def _handle_export(message: types.Message) -> None:
    results = get_recent_results(limit=1000)
    if not results:
        await message.answer("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
        return

    df = pd.DataFrame(results)
    buffer = io.BytesIO()
    with pd.ExcelWriter(buffer, engine="openpyxl") as writer:
        df.to_excel(writer, index=False, sheet_name="Results")
    buffer.seek(0)
    file = BufferedInputFile(buffer.read(), filename="parsing_results.xlsx")
    await message.answer_document(file, caption=f"üìà –≠–∫—Å–ø–æ—Ä—Ç: {len(results)} –∑–∞–ø–∏—Å–µ–π")


@dp.message(Command("start"))
async def cmd_start(message: types.Message) -> None:
    if not is_admin(message.from_user.id):
        await message.reply("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        return

    await message.reply(
        "üöÄ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –∑–∞–ø—É—â–µ–Ω!\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/profiles - —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Ñ–∏–ª–µ–π\n"
        "/parse <url> - –ø–∞—Ä—Å–∏—Ç—å URL\n"
        "/run <profile> - –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å\n"
        "/results - –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã\n"
        "/export - —ç–∫—Å–ø–æ—Ä—Ç –≤ Excel/CSV"
    )


@dp.message(Command("profiles"))
async def cmd_profiles(message: types.Message) -> None:
    if not is_admin(message.from_user.id):
        return

    profiles = load_profiles()
    if not profiles:
        await message.reply("‚ùå –ü—Ä–æ—Ñ–∏–ª–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        return

    text = "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏:\n\n"
    for key, profile in profiles.items():
        text += f"üî∏ `{key}` - {profile['name']}\n"

    await message.reply(text, parse_mode="Markdown")


@dp.message(Command("parse"))
async def cmd_parse(message: types.Message) -> None:
    if not is_admin(message.from_user.id):
        return

    args = message.text.split(" ", 1)
    if len(args) < 2:
        await message.reply("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /parse <url>")
        return

    url = args[1]
    await task_queue.enqueue("parse_url", message, url)


@dp.message(Command("run"))
async def cmd_run(message: types.Message) -> None:
    if not is_admin(message.from_user.id):
        return

    args = message.text.split(" ", 1)
    if len(args) < 2:
        await message.reply("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /run <profile_name>")
        return

    profile_name = args[1]
    profiles = load_profiles()
    if profile_name not in profiles:
        await message.reply(f"‚ùå –ü—Ä–æ—Ñ–∏–ª—å '{profile_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    await message.answer(f"üîÑ –ü—Ä–æ—Ñ–∏–ª—å '{profile_name}' –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å")
    await task_queue.enqueue("run_profile", message, profile_name)


@dp.message(Command("results"))
async def cmd_results(message: types.Message) -> None:
    if not is_admin(message.from_user.id):
        return

    results = get_recent_results(limit=100)
    if not results:
        await message.reply("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return

    text = f"üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:\n\n"
    for result in results[:10]:
        text += (
            f"üî∏ {result['timestamp']} - {result['profile_name']}: "
            f"{result['count']} —ç–ª–µ–º–µ–Ω—Ç–æ–≤\n"
        )
    await message.reply(text)


@dp.message(Command("export"))
async def cmd_export(message: types.Message) -> None:
    if not is_admin(message.from_user.id):
        return

    await _handle_export(message)


@dp.message(F.text)
async def cmd_unknown(message: types.Message) -> None:
    if is_admin(message.from_user.id):
        await message.reply("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help")


task_queue.register("parse_url", _handle_parse_url)
task_queue.register("run_profile", _handle_run_profile)

def get_bot_components() -> Dict[str, Any]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–∞–∂–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤–Ω–µ –ø–∞–∫–µ—Ç–∞."""
    return {
        "bot": bot,
        "dispatcher": dp,
        "queue": task_queue,
    }


__all__ = [
    "bot",
    "dp",
    "get_bot_components",
]
