"""–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –≤ –¥–∞—à–±–æ—Ä–¥–µ"""

import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import requests
import json
from datetime import datetime, timedelta
import io
import base64

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ - Universal Parser",
    page_icon="üìä",
    layout="wide"
)

# API –±–∞–∑–æ–≤—ã–π URL
API_BASE_URL = "http://localhost:8000/api/v1"

def fetch_data(endpoint: str, params: dict = None):
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å API"""
    try:
        response = requests.get(f"{API_BASE_URL}/advanced-analytics/{endpoint}", params=params)
        if response.status_code == 200:
            return response.json()
        return None
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

def download_file(data, filename, file_type):
    """–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª"""
    if file_type == "csv":
        csv = data.to_csv(index=False)
        b64 = base64.b64encode(csv.encode()).decode()
        href = f'<a href="data:file/csv;base64,{b64}" download="{filename}.csv">–°–∫–∞—á–∞—Ç—å CSV</a>'
    elif file_type == "json":
        json_str = json.dumps(data, ensure_ascii=False, indent=2)
        b64 = base64.b64encode(json_str.encode()).decode()
        href = f'<a href="data:file/json;base64,{b64}" download="{filename}.json">–°–∫–∞—á–∞—Ç—å JSON</a>'
    else:
        return None
    
    return href

def main():
    st.title("üìä –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã")
    st.markdown("---")

    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
    with st.sidebar:
        st.header("üîç –§–∏–ª—å—Ç—Ä—ã")
        
        # –ü–µ—Ä–∏–æ–¥
        period_options = {
            "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞": "1d",
            "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π": "7d", 
            "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π": "30d",
            "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 90 –¥–Ω–µ–π": "90d",
            "–ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥": "custom"
        }
        
        selected_period = st.selectbox("–ü–µ—Ä–∏–æ–¥", list(period_options.keys()))
        
        if selected_period == "–ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥":
            col1, col2 = st.columns(2)
            with col1:
                start_date = st.date_input("–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞", value=datetime.now() - timedelta(days=7))
            with col2:
                end_date = st.date_input("–ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞", value=datetime.now())
        else:
            start_date = None
            end_date = None
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
        st.subheader("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã")
        
        marketplace = st.selectbox(
            "–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å",
            ["–í—Å–µ", "Wildberries", "Ozon", "Yandex Market", "Avito", "M.Video", "Eldorado", "AliExpress", "Amazon", "eBay"]
        )
        
        category = st.selectbox(
            "–ö–∞—Ç–µ–≥–æ—Ä–∏—è",
            ["–í—Å–µ", "–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞", "–û–¥–µ–∂–¥–∞", "–û–±—É–≤—å", "–î–æ–º –∏ —Å–∞–¥", "–ö—Ä–∞—Å–æ—Ç–∞", "–°–ø–æ—Ä—Ç", "–ê–≤—Ç–æ", "–î–µ—Ç—Å–∫–∏–µ —Ç–æ–≤–∞—Ä—ã", "–ö–Ω–∏–≥–∏"]
        )
        
        user_id = st.text_input("ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)")
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        st.markdown("---")
        if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"):
            st.rerun()
        
        if st.button("üìä –°–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç"):
            st.info("–§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞")

    # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
    tab1, tab2, tab3, tab4, tab5 = st.tabs([
        "üìà –û–±–∑–æ—Ä", "üí∞ –¶–µ–Ω—ã", "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", "üì± –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ", "üîÆ –ü—Ä–æ–≥–Ω–æ–∑—ã"
    ])

    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
    params = {}
    if start_date and end_date:
        params["start_date"] = start_date.isoformat()
        params["end_date"] = end_date.isoformat()
    if marketplace != "–í—Å–µ":
        params["marketplace"] = marketplace
    if category != "–í—Å–µ":
        params["category"] = category
    if user_id:
        params["user_id"] = user_id

    with tab1:
        st.subheader("üìà –û–±–∑–æ—Ä–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞")
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–∑–æ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        overview_data = fetch_data("overview", params)
        
        if overview_data:
            metrics = overview_data["metrics"]
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                st.metric(
                    label="–¢–æ–≤–∞—Ä—ã",
                    value=f"{metrics['total_items']:,}",
                    delta=f"+{metrics['total_items'] // 10} –∑–∞ –ø–µ—Ä–∏–æ–¥"
                )
            
            with col2:
                st.metric(
                    label="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",
                    value=f"{metrics['total_users']:,}",
                    delta=f"+{metrics['active_users']} –∞–∫—Ç–∏–≤–Ω—ã—Ö"
                )
            
            with col3:
                st.metric(
                    label="–ü–æ—Å—Ç—ã",
                    value=f"{metrics['total_posts']:,}",
                    delta=f"+{metrics['total_posts'] // 5} –∑–∞ –ø–µ—Ä–∏–æ–¥"
                )
            
            with col4:
                st.metric(
                    label="–î–æ—Ö–æ–¥—ã",
                    value=f"${metrics['total_revenue']:,.2f}",
                    delta=f"+{metrics['total_revenue'] // 100}%"
                )
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            col5, col6, col7, col8 = st.columns(4)
            
            with col5:
                st.metric(
                    label="–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞",
                    value=f"${metrics['avg_price']:,.2f}",
                    delta=f"{metrics['price_change_percent']:+.1f}%"
                )
            
            with col6:
                st.metric(
                    label="–¢–æ–ø –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å",
                    value=metrics['top_marketplace'],
                    delta="–ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏"
                )
            
            with col7:
                st.metric(
                    label="–¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏—è",
                    value=metrics['top_category'],
                    delta="–ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É"
                )
            
            with col8:
                st.metric(
                    label="–í–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å",
                    value=f"{metrics['engagement_rate']:.1f}%",
                    delta="—É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"
                )
            
            # –ì—Ä–∞—Ñ–∏–∫–∏
            st.subheader("üìä –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
            dashboard_data = fetch_data("dashboard-data", {"period": period_options[selected_period]})
            
            if dashboard_data and "price_analytics" in dashboard_data:
                price_trend = dashboard_data["price_analytics"].get("price_trend", [])
                
                if price_trend:
                    df_trend = pd.DataFrame(price_trend)
                    df_trend['date'] = pd.to_datetime(df_trend['date'])
                    
                    fig = px.line(
                        df_trend, 
                        x='date', 
                        y='avg_price',
                        title='–¢—Ä–µ–Ω–¥ —Å—Ä–µ–¥–Ω–∏—Ö —Ü–µ–Ω',
                        labels={'avg_price': '–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ ($)', 'date': '–î–∞—Ç–∞'}
                    )
                    fig.update_layout(height=400)
                    st.plotly_chart(fig, use_container_width=True)
        else:
            st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–±–∑–æ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")

    with tab2:
        st.subheader("üí∞ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ü–µ–Ω")
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É —Ü–µ–Ω
        price_data = fetch_data("price-analysis", params)
        
        if price_data:
            analytics = price_data["analytics"]
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ü–µ–Ω
            if "price_statistics" in analytics:
                stats = analytics["price_statistics"]
                
                col1, col2, col3, col4 = st.columns(4)
                
                with col1:
                    st.metric("–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤", f"{stats.get('total_items', 0):,}")
                
                with col2:
                    st.metric("–¢–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö", f"{stats.get('total_price_points', 0):,}")
                
                with col3:
                    st.metric("–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å", f"{stats.get('price_volatility', 0):.2f}%")
                
                with col4:
                    st.metric("–°—Ä–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ", f"{stats.get('avg_price_change', 0):+.2f}%")
            
            # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–Ω
            if "price_distribution" in analytics:
                distribution = analytics["price_distribution"]
                
                st.subheader("üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–Ω")
                
                col1, col2 = st.columns(2)
                
                with col1:
                    # –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ü–µ–Ω
                    prices = [distribution.get('min', 0), distribution.get('mean', 0), distribution.get('max', 0)]
                    labels = ['–ú–∏–Ω', '–°—Ä–µ–¥–Ω–µ–µ', '–ú–∞–∫—Å']
                    
                    fig = px.bar(
                        x=labels, 
                        y=prices,
                        title="–û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —Ü–µ–Ω",
                        labels={'x': '–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å', 'y': '–¶–µ–Ω–∞ ($)'}
                    )
                    st.plotly_chart(fig, use_container_width=True)
                
                with col2:
                    # –ü—Ä–æ—Ü–µ–Ω—Ç–∏–ª–∏
                    percentiles = distribution.get('percentiles', {})
                    if percentiles:
                        fig = px.bar(
                            x=list(percentiles.keys()),
                            y=list(percentiles.values()),
                            title="–ü—Ä–æ—Ü–µ–Ω—Ç–∏–ª–∏ —Ü–µ–Ω",
                            labels={'x': '–ü—Ä–æ—Ü–µ–Ω—Ç–∏–ª—å', 'y': '–¶–µ–Ω–∞ ($)'}
                        )
                        st.plotly_chart(fig, use_container_width=True)
            
            # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤
            if "marketplace_comparison" in analytics:
                marketplace_data = analytics["marketplace_comparison"]
                
                if marketplace_data:
                    st.subheader("üè™ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤")
                    
                    # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                    comparison_df = pd.DataFrame(marketplace_data).T
                    comparison_df = comparison_df.reset_index()
                    comparison_df.columns = ['–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', '–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞', '–ú–∏–Ω —Ü–µ–Ω–∞', '–ú–∞–∫—Å —Ü–µ–Ω–∞', '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ']
                    
                    st.dataframe(comparison_df, use_container_width=True)
                    
                    # –ì—Ä–∞—Ñ–∏–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å—Ä–µ–¥–Ω–∏—Ö —Ü–µ–Ω
                    fig = px.bar(
                        comparison_df,
                        x='–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å',
                        y='–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞',
                        title='–°—Ä–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã –ø–æ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞–º',
                        labels={'–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞': '–¶–µ–Ω–∞ ($)', '–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å': '–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å'}
                    )
                    fig.update_layout(height=400)
                    st.plotly_chart(fig, use_container_width=True)
            
            # –ê–Ω–∞–ª–∏–∑ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            if "category_analysis" in analytics:
                category_data = analytics["category_analysis"]
                
                if category_data:
                    st.subheader("üìÇ –ê–Ω–∞–ª–∏–∑ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
                    
                    category_df = pd.DataFrame(category_data).T
                    category_df = category_df.reset_index()
                    category_df.columns = ['–ö–∞—Ç–µ–≥–æ—Ä–∏—è', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', '–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞', '–ú–∏–Ω —Ü–µ–Ω–∞', '–ú–∞–∫—Å —Ü–µ–Ω–∞', '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ']
                    
                    # –¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É
                    top_categories = category_df.nlargest(10, '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
                    
                    fig = px.pie(
                        top_categories,
                        values='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ',
                        names='–ö–∞—Ç–µ–≥–æ—Ä–∏—è',
                        title='–¢–æ–ø-10 –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ç–æ–≤–∞—Ä–æ–≤'
                    )
                    st.plotly_chart(fig, use_container_width=True)
        else:
            st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ —Ü–µ–Ω–∞–º")

    with tab3:
        st.subheader("üë• –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        user_data = fetch_data("user-analytics", params)
        
        if user_data:
            analytics = user_data["analytics"]
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                st.metric("–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", f"{analytics.get('total_users', 0):,}")
            
            with col2:
                st.metric("–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", f"{analytics.get('active_users', 0):,}")
            
            with col3:
                st.metric("–ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", f"{analytics.get('new_users', 0):,}")
            
            with col4:
                st.metric("–ö–æ–Ω–≤–µ—Ä—Å–∏—è", f"{analytics.get('user_activity', {}).get('conversion_rate', 0):.1f}%")
            
            # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            if "user_activity" in analytics:
                activity = analytics["user_activity"]
                
                st.subheader("üìà –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                
                if "daily_activity" in activity:
                    daily_df = pd.DataFrame(activity["daily_activity"])
                    daily_df['date'] = pd.to_datetime(daily_df['date'])
                    
                    fig = px.line(
                        daily_df,
                        x='date',
                        y='active_users',
                        title='–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
                        labels={'active_users': '–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', 'date': '–î–∞—Ç–∞'}
                    )
                    fig.update_layout(height=400)
                    st.plotly_chart(fig, use_container_width=True)
            
            # –ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
            if "geographic_distribution" in analytics:
                geo_data = analytics["geographic_distribution"]
                
                st.subheader("üåç –ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ")
                
                geo_df = pd.DataFrame(list(geo_data.items()), columns=['–°—Ç—Ä–∞–Ω–∞', '–ü—Ä–æ—Ü–µ–Ω—Ç'])
                
                fig = px.pie(
                    geo_df,
                    values='–ü—Ä–æ—Ü–µ–Ω—Ç',
                    names='–°—Ç—Ä–∞–Ω–∞',
                    title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Å—Ç—Ä–∞–Ω–∞–º'
                )
                st.plotly_chart(fig, use_container_width=True)
            
            # –ê–Ω–∞–ª–∏–∑ –ø–æ–¥–ø–∏—Å–æ–∫
            if "subscription_analytics" in analytics:
                sub_data = analytics["subscription_analytics"]
                
                st.subheader("üí≥ –ê–Ω–∞–ª–∏–∑ –ø–æ–¥–ø–∏—Å–æ–∫")
                
                col1, col2 = st.columns(2)
                
                with col1:
                    st.metric("–í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å–æ–∫", f"{sub_data.get('total_subscriptions', 0):,}")
                    st.metric("–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫", f"{sub_data.get('active_subscriptions', 0):,}")
                
                with col2:
                    st.metric("–û–±—â–∏–π –¥–æ—Ö–æ–¥", f"${sub_data.get('total_revenue', 0):,.2f}")
                    st.metric("–î–æ—Ö–æ–¥ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", f"${sub_data.get('avg_revenue_per_user', 0):,.2f}")
                
                # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∞—Ä–∏—Ñ–∞–º
                if "subscription_distribution" in sub_data:
                    sub_dist = sub_data["subscription_distribution"]
                    
                    if sub_dist:
                        sub_df = pd.DataFrame(list(sub_dist.items()), columns=['–¢–∞—Ä–∏—Ñ', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'])
                        
                        fig = px.bar(
                            sub_df,
                            x='–¢–∞—Ä–∏—Ñ',
                            y='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ',
                            title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ —Ç–∞—Ä–∏—Ñ–∞–º'
                        )
                        st.plotly_chart(fig, use_container_width=True)
            
            # –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
            if "top_users" in analytics:
                top_users = analytics["top_users"]
                
                if top_users:
                    st.subheader("üèÜ –¢–æ–ø –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                    
                    top_df = pd.DataFrame(top_users)
                    st.dataframe(top_df, use_container_width=True)
        else:
            st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")

    with tab4:
        st.subheader("üì± –°–æ—Ü–∏–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ü–∏–∞–ª—å–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É
        social_data = fetch_data("social-analytics", params)
        
        if social_data:
            analytics = social_data["analytics"]
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                st.metric("–í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤", f"{analytics.get('total_posts', 0):,}")
            
            with col2:
                st.metric("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤", f"{analytics.get('total_comments', 0):,}")
            
            with col3:
                st.metric("–õ–∞–π–∫–æ–≤", f"{analytics.get('total_likes', 0):,}")
            
            with col4:
                st.metric("–§–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤", f"{analytics.get('filtered_posts', 0):,}")
            
            # –ú–µ—Ç—Ä–∏–∫–∏ –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏
            if "engagement_metrics" in analytics:
                engagement = analytics["engagement_metrics"]
                
                st.subheader("üìä –ú–µ—Ç—Ä–∏–∫–∏ –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏")
                
                col1, col2, col3, col4 = st.columns(4)
                
                with col1:
                    st.metric("–°—Ä. –ª–∞–π–∫–æ–≤ –Ω–∞ –ø–æ—Å—Ç", f"{engagement.get('avg_likes_per_post', 0):.1f}")
                
                with col2:
                    st.metric("–°—Ä. –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –Ω–∞ –ø–æ—Å—Ç", f"{engagement.get('avg_comments_per_post', 0):.1f}")
                
                with col3:
                    st.metric("–°—Ä. –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –Ω–∞ –ø–æ—Å—Ç", f"{engagement.get('avg_views_per_post', 0):.1f}")
                
                with col4:
                    st.metric("–£—Ä–æ–≤–µ–Ω—å –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏", f"{engagement.get('engagement_rate', 0):.1f}%")
            
            # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–æ—Å—Ç—ã
            if "popular_posts" in analytics:
                popular_posts = analytics["popular_posts"]
                
                if popular_posts:
                    st.subheader("üî• –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–æ—Å—Ç—ã")
                    
                    popular_df = pd.DataFrame(popular_posts)
                    st.dataframe(popular_df, use_container_width=True)
            
            # –ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            if "content_analysis" in analytics:
                content_data = analytics["content_analysis"]
                
                if content_data:
                    st.subheader("üìù –ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
                    
                    content_df = pd.DataFrame(content_data).T
                    content_df = content_df.reset_index()
                    content_df.columns = ['–¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', '–°—Ä–µ–¥–Ω–∏–µ –ª–∞–π–∫–∏']
                    
                    fig = px.bar(
                        content_df,
                        x='–¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞',
                        y='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ',
                        title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º –∫–æ–Ω—Ç–µ–Ω—Ç–∞'
                    )
                    st.plotly_chart(fig, use_container_width=True)
            
            # –í—Ä–µ–º–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            if "temporal_activity" in analytics:
                temporal = analytics["temporal_activity"]
                
                st.subheader("‚è∞ –í—Ä–µ–º–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å")
                
                col1, col2 = st.columns(2)
                
                with col1:
                    if "hourly_activity" in temporal:
                        hourly_df = pd.DataFrame(temporal["hourly_activity"])
                        
                        fig = px.bar(
                            hourly_df,
                            x='hour',
                            y='posts',
                            title='–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —á–∞—Å–∞–º',
                            labels={'hour': '–ß–∞—Å', 'posts': '–ü–æ—Å—Ç—ã'}
                        )
                        st.plotly_chart(fig, use_container_width=True)
                
                with col2:
                    if "daily_activity" in temporal:
                        daily_df = pd.DataFrame(temporal["daily_activity"])
                        
                        fig = px.bar(
                            daily_df,
                            x='day',
                            y='posts',
                            title='–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏',
                            labels={'day': '–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏', 'posts': '–ü–æ—Å—Ç—ã'}
                        )
                        st.plotly_chart(fig, use_container_width=True)
        else:
            st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")

    with tab5:
        st.subheader("üîÆ –ü—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É
        predictive_data = fetch_data("predictive-analytics", params)
        
        if predictive_data:
            predictions = predictive_data["predictions"]
            
            # –ü—Ä–æ–≥–Ω–æ–∑ —Ü–µ–Ω
            if "price_forecast" in predictions:
                price_forecast = predictions["price_forecast"]
                
                st.subheader("üí∞ –ü—Ä–æ–≥–Ω–æ–∑ —Ü–µ–Ω")
                
                col1, col2, col3, col4 = st.columns(4)
                
                with col1:
                    st.metric("–ù–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é", f"${price_forecast.get('next_week', {}).get('avg_price', 0):,.2f}")
                
                with col2:
                    st.metric("–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ –Ω–µ–¥–µ–ª—é", f"{price_forecast.get('next_week', {}).get('change_percent', 0):+.1f}%")
                
                with col3:
                    st.metric("–ù–∞ —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü", f"${price_forecast.get('next_month', {}).get('avg_price', 0):,.2f}")
                
                with col4:
                    st.metric("–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ –º–µ—Å—è—Ü", f"{price_forecast.get('next_month', {}).get('change_percent', 0):+.1f}%")
                
                # –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥–Ω–æ–∑–∞ —Ü–µ–Ω
                forecast_data = [
                    {"period": "–¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è", "price": 1500, "change": 0},
                    {"period": "–°–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è", "price": price_forecast.get('next_week', {}).get('avg_price', 1500), "change": price_forecast.get('next_week', {}).get('change_percent', 0)},
                    {"period": "–°–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü", "price": price_forecast.get('next_month', {}).get('avg_price', 1550), "change": price_forecast.get('next_month', {}).get('change_percent', 0)}
                ]
                
                forecast_df = pd.DataFrame(forecast_data)
                
                fig = px.line(
                    forecast_df,
                    x='period',
                    y='price',
                    title='–ü—Ä–æ–≥–Ω–æ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω',
                    labels={'price': '–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ ($)', 'period': '–ü–µ—Ä–∏–æ–¥'}
                )
                st.plotly_chart(fig, use_container_width=True)
            
            # –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            if "user_forecast" in predictions:
                user_forecast = predictions["user_forecast"]
                
                st.subheader("üë• –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                
                col1, col2, col3, col4 = st.columns(4)
                
                with col1:
                    st.metric("–ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–Ω–µ–¥–µ–ª—è)", f"{user_forecast.get('next_week', {}).get('new_users', 0):,}")
                
                with col2:
                    st.metric("–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–Ω–µ–¥–µ–ª—è)", f"{user_forecast.get('next_week', {}).get('active_users', 0):,}")
                
                with col3:
                    st.metric("–ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–º–µ—Å—è—Ü)", f"{user_forecast.get('next_month', {}).get('new_users', 0):,}")
                
                with col4:
                    st.metric("–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–º–µ—Å—è—Ü)", f"{user_forecast.get('next_month', {}).get('active_users', 0):,}")
            
            # –ü—Ä–æ–≥–Ω–æ–∑ –¥–æ—Ö–æ–¥–æ–≤
            if "revenue_forecast" in predictions:
                revenue_forecast = predictions["revenue_forecast"]
                
                st.subheader("üíµ –ü—Ä–æ–≥–Ω–æ–∑ –¥–æ—Ö–æ–¥–æ–≤")
                
                col1, col2, col3, col4 = st.columns(4)
                
                with col1:
                    st.metric("–î–æ—Ö–æ–¥ (–Ω–µ–¥–µ–ª—è)", f"${revenue_forecast.get('next_week', {}).get('revenue', 0):,.2f}")
                
                with col2:
                    st.metric("–ü–æ–¥–ø–∏—Å–æ–∫ (–Ω–µ–¥–µ–ª—è)", f"{revenue_forecast.get('next_week', {}).get('subscriptions', 0):,}")
                
                with col3:
                    st.metric("–î–æ—Ö–æ–¥ (–º–µ—Å—è—Ü)", f"${revenue_forecast.get('next_month', {}).get('revenue', 0):,.2f}")
                
                with col4:
                    st.metric("–ü–æ–¥–ø–∏—Å–æ–∫ (–º–µ—Å—è—Ü)", f"{revenue_forecast.get('next_month', {}).get('subscriptions', 0):,}")
            
            # –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≥–Ω–æ–∑–∞—Ö
            st.subheader("üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≥–Ω–æ–∑–∞—Ö")
            
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.metric("–£—Ä–æ–≤–µ–Ω—å –¥–æ–≤–µ—Ä–∏—è", f"{predictions.get('confidence_level', 0) * 100:.1f}%")
            
            with col2:
                st.metric("–ü–µ—Ä–∏–æ–¥ –ø—Ä–æ–≥–Ω–æ–∑–∞", predictions.get('forecast_period', 'N/A'))
            
            with col3:
                st.metric("–¢–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏", "85%")
        else:
            st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")

    # –ü–∞–Ω–µ–ª—å —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤–Ω–∏–∑—É
    st.markdown("---")
    st.subheader("üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        if st.button("üìä –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel"):
            st.info("–§—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Excel –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞")
    
    with col2:
        if st.button("üìÑ –≠–∫—Å–ø–æ—Ä—Ç –≤ PDF"):
            st.info("–§—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ PDF –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞")
    
    with col3:
        if st.button("üìã –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV"):
            st.info("–§—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ CSV –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞")
    
    with col4:
        if st.button("üì± –≠–∫—Å–ø–æ—Ä—Ç –≤ JSON"):
            st.info("–§—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ JSON –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞")

if __name__ == "__main__":
    main()
