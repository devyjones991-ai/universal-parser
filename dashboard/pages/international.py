"""–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–Ω—Ç–µ—Ä–Ω–∞—Ü–∏–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ –¥–∞—à–±–æ—Ä–¥–µ"""

import streamlit as st
import pandas as pd
import plotly.express as px
import requests
import json
from datetime import datetime, timedelta
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ò–Ω—Ç–µ—Ä–Ω–∞—Ü–∏–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è - Universal Parser",
    page_icon="üåç",
    layout="wide"
)

# API –±–∞–∑–æ–≤—ã–π URL
API_BASE_URL = "http://localhost:8000/api/v1"

def fetch_data(endpoint: str, params: dict = None):
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å API"""
    try:
        response = requests.get(f"{API_BASE_URL}/international/{endpoint}", params=params)
        if response.status_code == 200:
            return response.json()
        return None
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

def main():
    st.title("üåç –ò–Ω—Ç–µ—Ä–Ω–∞—Ü–∏–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∏ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è")
    st.markdown("---")

    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ª–æ–∫–∞–ª–∏
    with st.sidebar:
        st.header("üåê –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–∫–∞–ª–∏")
        
        # –í—ã–±–æ—Ä —è–∑—ã–∫–∞
        locales_data = fetch_data("locales")
        if locales_data:
            locales = locales_data.get("locales", [])
            locale_options = {f"{loc['name']} ({loc['code']})": loc['code'] for loc in locales}
            selected_locale = st.selectbox("–Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:", list(locale_options.keys()))
            current_locale = locale_options[selected_locale]
        else:
            current_locale = "en"
        
        # –í—ã–±–æ—Ä –≤–∞–ª—é—Ç—ã
        currencies_data = fetch_data("currencies")
        if currencies_data:
            currencies = currencies_data.get("currencies", [])
            currency_options = {f"{curr['name']} ({curr['code']})": curr['code'] for curr in currencies}
            selected_currency = st.selectbox("–í–∞–ª—é—Ç–∞:", list(currency_options.keys()))
            current_currency = currency_options[selected_currency]
        else:
            current_currency = "USD"
        
        # –í—ã–±–æ—Ä —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
        timezones_data = fetch_data("timezones")
        if timezones_data:
            timezones = timezones_data.get("timezones", [])
            timezone_options = {f"{tz['display_name']} ({tz['name']})": tz['name'] for tz in timezones}
            selected_timezone = st.selectbox("–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å:", list(timezone_options.keys()))
            current_timezone = timezone_options[selected_timezone]
        else:
            current_timezone = "UTC"
        
        # –ö–Ω–æ–ø–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
        if st.button("–ü—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"):
            st.session_state.current_locale = current_locale
            st.session_state.current_currency = current_currency
            st.session_state.current_timezone = current_timezone
            st.success("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã!")
            st.rerun()

    # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
    tab1, tab2, tab3, tab4, tab5 = st.tabs([
        "üåê –õ–æ–∫–∞–ª–∏", "üí± –í–∞–ª—é—Ç—ã", "üïê –ß–∞—Å–æ–≤—ã–µ –ø–æ—è—Å–∞", "üìù –ü–µ—Ä–µ–≤–æ–¥—ã", "üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏"
    ])

    with tab1:
        st.subheader("üåê –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ª–æ–∫–∞–ª–∏")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ª–æ–∫–∞–ª–µ–π
        locales_data = fetch_data("locales")
        
        if locales_data:
            locales = locales_data.get("locales", [])
            
            # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            df_locales = pd.DataFrame(locales)
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
            st.dataframe(df_locales, use_container_width=True)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ª–æ–∫–∞–ª—è–º
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                st.metric("–í—Å–µ–≥–æ –ª–æ–∫–∞–ª–µ–π", len(locales))
            
            with col2:
                rtl_count = len([loc for loc in locales if loc.get('is_rtl', False)])
                st.metric("RTL —è–∑—ã–∫–∏", rtl_count)
            
            with col3:
                st.metric("–õ–∞—Ç–∏–Ω—Å–∫–∏–µ —è–∑—ã–∫–∏", len(locales) - rtl_count)
            
            with col4:
                st.metric("–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é", locales_data.get("default", "en"))
            
            # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ª–æ–∫–∞–ª–∏
            if current_locale:
                locale_info = fetch_data(f"locales/{current_locale}")
                if locale_info:
                    st.subheader(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–æ–∫–∞–ª–∏: {locale_info.get('name', current_locale)}")
                    
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        st.write(f"**–ö–æ–¥:** {locale_info.get('code')}")
                        st.write(f"**–Ø–∑—ã–∫:** {locale_info.get('language')}")
                        st.write(f"**–¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è:** {locale_info.get('territory')}")
                        st.write(f"**RTL:** {'–î–∞' if locale_info.get('is_rtl') else '–ù–µ—Ç'}")
                    
                    with col2:
                        st.write(f"**–í–∞–ª—é—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:** {locale_info.get('currency')}")
                        st.write(f"**–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å:** {locale_info.get('timezone')}")
                        st.write(f"**–≠–º–æ–¥–∑–∏:** {locale_info.get('emoji', 'üåç')}")
        else:
            st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ª–æ–∫–∞–ª—è—Ö")

    with tab2:
        st.subheader("üí± –í–∞–ª—é—Ç—ã –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç
        currencies_data = fetch_data("currencies")
        
        if currencies_data:
            currencies = currencies_data.get("currencies", [])
            
            # –§–∏–ª—å—Ç—Ä—ã –≤–∞–ª—é—Ç
            col1, col2 = st.columns(2)
            
            with col1:
                currency_type = st.selectbox("–¢–∏–ø –≤–∞–ª—é—Ç—ã:", ["–í—Å–µ", "–§–∏–∞—Ç–Ω—ã–µ", "–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã"])
            
            with col2:
                search_currency = st.text_input("–ü–æ–∏—Å–∫ –≤–∞–ª—é—Ç—ã:", placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ")
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –≤–∞–ª—é—Ç—ã
            filtered_currencies = currencies
            
            if currency_type == "–§–∏–∞—Ç–Ω—ã–µ":
                filtered_currencies = [curr for curr in filtered_currencies if not curr.get('is_crypto', False)]
            elif currency_type == "–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã":
                filtered_currencies = [curr for curr in filtered_currencies if curr.get('is_crypto', False)]
            
            if search_currency:
                filtered_currencies = [
                    curr for curr in filtered_currencies
                    if search_currency.lower() in curr.get('code', '').lower() or
                       search_currency.lower() in curr.get('name', '').lower()
                ]
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤–∞–ª—é—Ç—ã
            df_currencies = pd.DataFrame(filtered_currencies)
            st.dataframe(df_currencies, use_container_width=True)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç
            st.subheader("üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç")
            
            col1, col2, col3 = st.columns(3)
            
            with col1:
                amount = st.number_input("–°—É–º–º–∞:", min_value=0.0, value=100.0)
            
            with col2:
                from_currency = st.selectbox("–ò–∑ –≤–∞–ª—é—Ç—ã:", [curr['code'] for curr in currencies])
            
            with col3:
                to_currency = st.selectbox("–í –≤–∞–ª—é—Ç—É:", [curr['code'] for curr in currencies])
            
            if st.button("–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å"):
                conversion_data = fetch_data(
                    "currencies/convert",
                    {
                        "amount": amount,
                        "from_currency": from_currency,
                        "to_currency": to_currency
                    }
                )
                
                if conversion_data:
                    st.success(f"**{amount} {from_currency} = {conversion_data['converted_amount']:.2f} {to_currency}**")
                    st.info(f"–ö—É—Ä—Å: 1 {from_currency} = {conversion_data['rate']:.6f} {to_currency}")
                else:
                    st.error("–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∞–ª—é—Ç")
            
            # –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç
            st.subheader("üìä –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç")
            
            base_currency = st.selectbox("–ë–∞–∑–æ–≤–∞—è –≤–∞–ª—é—Ç–∞:", [curr['code'] for curr in currencies])
            target_currencies = st.multiselect(
                "–¶–µ–ª–µ–≤—ã–µ –≤–∞–ª—é—Ç—ã:",
                [curr['code'] for curr in currencies],
                default=["EUR", "RUB", "GBP", "JPY"]
            )
            
            if st.button("–ü–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã") and target_currencies:
                rates_data = fetch_data(
                    "currencies/rates",
                    {
                        "from_currency": base_currency,
                        "to_currencies": ",".join(target_currencies)
                    }
                )
                
                if rates_data:
                    rates_df = pd.DataFrame([
                        {"–í–∞–ª—é—Ç–∞": curr, "–ö—É—Ä—Å": rate}
                        for curr, rate in rates_data['rates'].items()
                    ])
                    
                    st.dataframe(rates_df, use_container_width=True)
                    
                    # –ì—Ä–∞—Ñ–∏–∫ –∫—É—Ä—Å–æ–≤
                    fig = px.bar(
                        rates_df,
                        x="–í–∞–ª—é—Ç–∞",
                        y="–ö—É—Ä—Å",
                        title=f"–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –∫ {base_currency}"
                    )
                    st.plotly_chart(fig, use_container_width=True)
        else:
            st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –≤–∞–ª—é—Ç–∞—Ö")

    with tab3:
        st.subheader("üïê –ß–∞—Å–æ–≤—ã–µ –ø–æ—è—Å–∞")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤
        timezones_data = fetch_data("timezones")
        
        if timezones_data:
            timezones = timezones_data.get("timezones", [])
            
            # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º
            groups_data = fetch_data("timezones/groups")
            if groups_data:
                groups = groups_data.get("groups", {})
                
                for region, region_timezones in groups.items():
                    if region_timezones:
                        with st.expander(f"üåç {region} ({len(region_timezones)} —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤)"):
                            df_region = pd.DataFrame(region_timezones)
                            st.dataframe(df_region, use_container_width=True)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤
            st.subheader("üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤")
            
            col1, col2, col3 = st.columns(3)
            
            with col1:
                datetime_input = st.datetime_input("–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:", value=datetime.now())
            
            with col2:
                from_tz = st.selectbox("–ò–∑ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞:", [tz['name'] for tz in timezones])
            
            with col3:
                to_tz = st.selectbox("–í —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å:", [tz['name'] for tz in timezones])
            
            if st.button("–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è"):
                conversion_data = fetch_data(
                    "timezones/convert",
                    {
                        "datetime": datetime_input.isoformat(),
                        "from_timezone": from_tz,
                        "to_timezone": to_tz
                    }
                )
                
                if conversion_data:
                    st.success(f"**{conversion_data['original_datetime']} ({from_tz}) = {conversion_data['converted_datetime']} ({to_tz})**")
                    st.info(f"–†–∞–∑–Ω–æ—Å—Ç—å: {conversion_data['time_difference']}")
                else:
                    st.error("–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏")
            
            # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —Ä–∞–∑–Ω—ã—Ö —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–∞—Ö
            st.subheader("‚è∞ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è")
            
            selected_timezones = st.multiselect(
                "–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å–æ–≤—ã–µ –ø–æ—è—Å–∞:",
                [tz['name'] for tz in timezones],
                default=["UTC", "America/New_York", "Europe/London", "Asia/Tokyo"]
            )
            
            if selected_timezones:
                current_times = []
                for tz_name in selected_timezones:
                    time_data = fetch_data(f"timezones/current/{tz_name}")
                    if time_data:
                        current_times.append({
                            "–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å": tz_name,
                            "–í—Ä–µ–º—è": time_data['current_time'],
                            "–°–º–µ—â–µ–Ω–∏–µ UTC": time_data['utc_offset'],
                            "–ê–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä–∞": time_data['abbreviation'],
                            "–õ–µ—Ç–Ω–µ–µ –≤—Ä–µ–º—è": "–î–∞" if time_data['is_dst'] else "–ù–µ—Ç"
                        })
                
                if current_times:
                    df_times = pd.DataFrame(current_times)
                    st.dataframe(df_times, use_container_width=True)
            
            # –†–∞–±–æ—á–∏–µ —á–∞—Å—ã
            st.subheader("üíº –†–∞–±–æ—á–∏–µ —á–∞—Å—ã")
            
            col1, col2 = st.columns(2)
            
            with col1:
                work_tz = st.selectbox("–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å:", [tz['name'] for tz in timezones])
            
            with col2:
                work_hours = st.slider("–†–∞–±–æ—á–∏–µ —á–∞—Å—ã:", 0, 23, (9, 17))
            
            if st.button("–ü–æ–ª—É—á–∏—Ç—å —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã"):
                work_data = fetch_data(
                    f"timezones/working-hours/{work_tz}",
                    {
                        "start_hour": work_hours[0],
                        "end_hour": work_hours[1]
                    }
                )
                
                if work_data:
                    st.info(f"**–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è:** {work_data['current_time']}")
                    st.info(f"**–†–∞–±–æ—á–∏–µ —á–∞—Å—ã:** {work_data['work_start']} - {work_data['work_end']}")
                    st.info(f"**–†–∞–±–æ—á–∏–π –¥–µ–Ω—å:** {'–î–∞' if work_data['is_workday'] else '–ù–µ—Ç'}")
                    st.info(f"**–†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è:** {'–î–∞' if work_data['is_working_hours'] else '–ù–µ—Ç'}")
        else:
            st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–∞—Ö")

    with tab4:
        st.subheader("üìù –ü–µ—Ä–µ–≤–æ–¥—ã –∏ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π –ª–æ–∫–∞–ª–∏
        if current_locale:
            translations_data = fetch_data("translations", {"locale": current_locale})
            
            if translations_data:
                translations = translations_data.get("translations", {})
                
                # –í—ã–±–æ—Ä –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –∏–º–µ–Ω
                namespaces = list(translations.keys())
                selected_namespace = st.selectbox("–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –∏–º–µ–Ω:", ["–í—Å–µ"] + namespaces)
                
                if selected_namespace == "–í—Å–µ":
                    display_translations = translations
                else:
                    display_translations = translations.get(selected_namespace, {})
                
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã
                if display_translations:
                    st.json(display_translations)
                else:
                    st.info("–ü–µ—Ä–µ–≤–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ —Ç–µ–∫—Å—Ç–∞
            st.subheader("üîç –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞")
            
            text_input = st.text_area("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–∞:", height=100)
            
            if st.button("–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —è–∑—ã–∫") and text_input:
                detection_data = fetch_data("detect-language", {"text": text_input})
                
                if detection_data:
                    st.success(f"**–û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —è–∑—ã–∫:** {detection_data['detected_language']}")
                    st.info(f"**–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:** {detection_data['confidence'] * 100:.1f}%")
                    st.info(f"**RTL:** {'–î–∞' if detection_data['is_rtl'] else '–ù–µ—Ç'}")
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã
            st.subheader("üí∞ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã")
            
            col1, col2, col3 = st.columns(3)
            
            with col1:
                currency_amount = st.number_input("–°—É–º–º–∞:", min_value=0.0, value=1234.56)
            
            with col2:
                currency_code = st.selectbox("–í–∞–ª—é—Ç–∞:", [curr['code'] for curr in currencies])
            
            with col3:
                currency_locale = st.selectbox("–õ–æ–∫–∞–ª—å:", [loc['code'] for loc in locales])
            
            if st.button("–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∞–ª—é—Ç—É"):
                format_data = fetch_data(
                    "format/currency",
                    {
                        "amount": currency_amount,
                        "currency": currency_code,
                        "locale": currency_locale
                    }
                )
                
                if format_data:
                    st.success(f"**–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—É–º–º–∞:** {format_data['formatted']}")
                    st.info(f"**–°–∏–º–≤–æ–ª:** {format_data['symbol']}")
                    st.info(f"**–ù–∞–∑–≤–∞–Ω–∏–µ:** {format_data['name']}")
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
            st.subheader("üìÖ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏")
            
            col1, col2, col3 = st.columns(3)
            
            with col1:
                datetime_input = st.datetime_input("–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:", value=datetime.now())
            
            with col2:
                datetime_locale = st.selectbox("–õ–æ–∫–∞–ª—å:", [loc['code'] for loc in locales])
            
            with col3:
                datetime_tz = st.selectbox("–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å:", [tz['name'] for tz in timezones])
            
            if st.button("–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è"):
                format_data = fetch_data(
                    "format/datetime",
                    {
                        "datetime_str": datetime_input.isoformat(),
                        "locale": datetime_locale,
                        "timezone": datetime_tz
                    }
                )
                
                if format_data:
                    st.success(f"**–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:** {format_data['formatted']}")
                    st.info(f"**RTL:** {'–î–∞' if format_data['is_rtl'] else '–ù–µ—Ç'}")

    with tab5:
        st.subheader("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä–Ω–∞—Ü–∏–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        st.subheader("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.metric("–Ø–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é", "English (en)")
        
        with col2:
            st.metric("–í–∞–ª—é—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é", "USD")
        
        with col3:
            st.metric("–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é", "UTC")
        
        # RTL —è–∑—ã–∫–∏
        st.subheader("üìù RTL —è–∑—ã–∫–∏")
        
        rtl_data = fetch_data("rtl-languages")
        if rtl_data:
            rtl_languages = rtl_data.get("rtl_languages", [])
            
            df_rtl = pd.DataFrame(rtl_languages)
            st.dataframe(df_rtl, use_container_width=True)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å—Ç—Ä–∞–Ω—ã
        st.subheader("üè≥Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å—Ç—Ä–∞–Ω—ã")
        
        country_code = st.text_input("–ö–æ–¥ —Å—Ç—Ä–∞–Ω—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, US, RU, DE):", value="US")
        
        if st.button("–ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω—ã"):
            country_data = fetch_data(f"country-settings/{country_code}")
            
            if country_data:
                st.success(f"**–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è {country_code}:**")
                st.info(f"**–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å:** {country_data.get('timezone', 'N/A')}")
                st.info(f"**–í–∞–ª—é—Ç–∞:** {country_data.get('currency', 'N/A')}")
                st.info(f"**–õ–æ–∫–∞–ª—å:** {country_data.get('locale', 'N/A')}")
                st.info(f"**RTL:** {'–î–∞' if country_data.get('is_rtl') else '–ù–µ—Ç'}")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ª–æ–∫–∞–ª–∏
        st.subheader("üåê –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ª–æ–∫–∞–ª–∏")
        
        locale_code = st.selectbox("–ö–æ–¥ –ª–æ–∫–∞–ª–∏:", [loc['code'] for loc in locales])
        
        if st.button("–ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–∫–∞–ª–∏"):
            locale_data = fetch_data(f"locale-settings/{locale_code}")
            
            if locale_data:
                st.success(f"**–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è {locale_code}:**")
                st.info(f"**–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å:** {locale_data.get('timezone', 'N/A')}")
                st.info(f"**–í–∞–ª—é—Ç–∞:** {locale_data.get('currency', 'N/A')}")
                st.info(f"**RTL:** {'–î–∞' if locale_data.get('is_rtl') else '–ù–µ—Ç'}")
                st.info(f"**–Ø–∑—ã–∫:** {locale_data.get('language', 'N/A')}")
                st.info(f"**–¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è:** {locale_data.get('territory', 'N/A')}")
                st.info(f"**–û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:** {locale_data.get('display_name', 'N/A')}")

if __name__ == "__main__":
    main()


