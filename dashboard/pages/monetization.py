"""–°—Ç—Ä–∞–Ω–∏—Ü–∞ –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏ –≤ –¥–∞—à–±–æ—Ä–¥–µ"""

import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta
import requests
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ú–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏—è - Universal Parser",
    page_icon="üí∞",
    layout="wide"
)

# API –±–∞–∑–æ–≤—ã–π URL
API_BASE_URL = "http://localhost:8000/api/v1"

def get_subscription_plans():
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã"""
    try:
        response = requests.get(f"{API_BASE_URL}/subscription/plans")
        if response.status_code == 200:
            return response.json()
        return []
    except:
        return []

def get_user_billing(user_id: str):
    """–ü–æ–ª—É—á–∏—Ç—å –±–∏–ª–ª–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        response = requests.get(f"{API_BASE_URL}/subscription/user/{user_id}/billing")
        if response.status_code == 200:
            return response.json()
        return None
    except:
        return None

def get_payment_stats():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–ª–∞—Ç–µ–∂–µ–π"""
    # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    return {
        "total_revenue": 12500.0,
        "monthly_revenue": 3200.0,
        "active_subscriptions": 156,
        "conversion_rate": 12.5,
        "churn_rate": 3.2
    }

def main():
    st.title("üí∞ –ú–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏—è –∏ –ë–∏–ª–ª–∏–Ω–≥")
    st.markdown("---")

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    plans = get_subscription_plans()
    stats = get_payment_stats()

    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric(
            label="–û–±—â–∏–π –¥–æ—Ö–æ–¥",
            value=f"${stats['total_revenue']:,.0f}",
            delta=f"+{stats['monthly_revenue']:,.0f} –∑–∞ –º–µ—Å—è—Ü"
        )
    
    with col2:
        st.metric(
            label="–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏",
            value=stats['active_subscriptions'],
            delta="+12 –∑–∞ –Ω–µ–¥–µ–ª—é"
        )
    
    with col3:
        st.metric(
            label="–ö–æ–Ω–≤–µ—Ä—Å–∏—è",
            value=f"{stats['conversion_rate']:.1f}%",
            delta="+2.1%"
        )
    
    with col4:
        st.metric(
            label="–û—Ç—Ç–æ–∫",
            value=f"{stats['churn_rate']:.1f}%",
            delta="-0.5%"
        )

    st.markdown("---")

    # –¢–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã
    st.subheader("üìã –¢–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã")
    
    if plans:
        # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–ª–∞–Ω–æ–≤
        plans_data = []
        for plan in plans:
            plans_data.append({
                "–ù–∞–∑–≤–∞–Ω–∏–µ": plan['name'],
                "–£—Ä–æ–≤–µ–Ω—å": plan['tier'],
                "–¶–µ–Ω–∞/–º–µ—Å—è—Ü": f"${plan['price_monthly']:.2f}",
                "–¶–µ–Ω–∞/–≥–æ–¥": f"${plan['price_yearly']:.2f}",
                "–≠–∫–æ–Ω–æ–º–∏—è": f"{((plan['price_monthly'] * 12 - plan['price_yearly']) / (plan['price_monthly'] * 12) * 100):.1f}%",
                "–ê–∫—Ç–∏–≤–µ–Ω": "‚úÖ" if plan['is_active'] else "‚ùå"
            })
        
        df_plans = pd.DataFrame(plans_data)
        st.dataframe(df_plans, use_container_width=True)
    else:
        # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        st.info("–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–∞—Ä–∏—Ñ–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤...")
        
        # –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ
        demo_plans = [
            {
                "–ù–∞–∑–≤–∞–Ω–∏–µ": "Free",
                "–£—Ä–æ–≤–µ–Ω—å": "free",
                "–¶–µ–Ω–∞/–º–µ—Å—è—Ü": "$0.00",
                "–¶–µ–Ω–∞/–≥–æ–¥": "$0.00",
                "–≠–∫–æ–Ω–æ–º–∏—è": "0%",
                "–ê–∫—Ç–∏–≤–µ–Ω": "‚úÖ"
            },
            {
                "–ù–∞–∑–≤–∞–Ω–∏–µ": "Pro",
                "–£—Ä–æ–≤–µ–Ω—å": "pro",
                "–¶–µ–Ω–∞/–º–µ—Å—è—Ü": "$19.99",
                "–¶–µ–Ω–∞/–≥–æ–¥": "$199.99",
                "–≠–∫–æ–Ω–æ–º–∏—è": "16.7%",
                "–ê–∫—Ç–∏–≤–µ–Ω": "‚úÖ"
            },
            {
                "–ù–∞–∑–≤–∞–Ω–∏–µ": "Premium",
                "–£—Ä–æ–≤–µ–Ω—å": "premium",
                "–¶–µ–Ω–∞/–º–µ—Å—è—Ü": "$49.99",
                "–¶–µ–Ω–∞/–≥–æ–¥": "$499.99",
                "–≠–∫–æ–Ω–æ–º–∏—è": "16.7%",
                "–ê–∫—Ç–∏–≤–µ–Ω": "‚úÖ"
            }
        ]
        
        df_plans = pd.DataFrame(demo_plans)
        st.dataframe(df_plans, use_container_width=True)

    st.markdown("---")

    # –ì—Ä–∞—Ñ–∏–∫–∏ –¥–æ—Ö–æ–¥–æ–≤
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üìà –î–∏–Ω–∞–º–∏–∫–∞ –¥–æ—Ö–æ–¥–æ–≤")
        
        # –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
        dates = pd.date_range(start=datetime.now() - timedelta(days=30), end=datetime.now(), freq='D')
        revenue_data = []
        
        for date in dates:
            base_revenue = 100
            trend = (date - dates[0]).days * 2
            noise = pd.Series(range(len(dates))).sample(1).iloc[0] * 0.1
            revenue = base_revenue + trend + noise
            revenue_data.append(max(0, revenue))
        
        df_revenue = pd.DataFrame({
            '–î–∞—Ç–∞': dates,
            '–î–æ—Ö–æ–¥': revenue_data
        })
        
        fig_revenue = px.line(df_revenue, x='–î–∞—Ç–∞', y='–î–æ—Ö–æ–¥', title='–î–æ—Ö–æ–¥ –ø–æ –¥–Ω—è–º')
        fig_revenue.update_layout(height=400)
        st.plotly_chart(fig_revenue, use_container_width=True)
    
    with col2:
        st.subheader("ü•ß –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–æ–∫")
        
        # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫—Ä—É–≥–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã
        subscription_data = {
            'Free': 1200,
            'Pro': 120,
            'Premium': 36
        }
        
        fig_pie = px.pie(
            values=list(subscription_data.values()),
            names=list(subscription_data.keys()),
            title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ç–∞—Ä–∏—Ñ–∞–º'
        )
        fig_pie.update_layout(height=400)
        st.plotly_chart(fig_pie, use_container_width=True)

    st.markdown("---")

    # –ö—ç—à–±–µ–∫ –∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üí∏ –ö—ç—à–±–µ–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∞")
        
        cashback_stats = {
            "–û–±—â–∏–π –∫—ç—à–±–µ–∫ –≤—ã–ø–ª–∞—á–µ–Ω": "$2,450.00",
            "–û–∂–∏–¥–∞–µ—Ç –≤—ã–ø–ª–∞—Ç—ã": "$180.50",
            "–°—Ä–µ–¥–Ω–∏–π –∫—ç—à–±–µ–∫": "$15.30",
            "–ê–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤": 156
        }
        
        for key, value in cashback_stats.items():
            st.metric(key, value)
    
    with col2:
        st.subheader("üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞")
        
        referral_stats = {
            "–í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤": 89,
            "–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö": 67,
            "–û–±—â–∏–µ –Ω–∞–≥—Ä–∞–¥—ã": "$1,340.00",
            "–°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä–∞–¥–∞": "$20.00"
        }
        
        for key, value in referral_stats.items():
            st.metric(key, value)

    st.markdown("---")

    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
    st.subheader("‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏")
    
    tab1, tab2, tab3 = st.tabs(["–°–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"])
    
    with tab1:
        st.write("### –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–∞—Ä–∏—Ñ–Ω–æ–≥–æ –ø–ª–∞–Ω–∞")
        
        with st.form("create_plan"):
            col1, col2 = st.columns(2)
            
            with col1:
                plan_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–∞", value="Enterprise")
                plan_tier = st.selectbox("–£—Ä–æ–≤–µ–Ω—å", ["free", "pro", "premium", "enterprise"])
                price_monthly = st.number_input("–¶–µ–Ω–∞ –∑–∞ –º–µ—Å—è—Ü ($)", min_value=0.0, value=99.99)
            
            with col2:
                price_yearly = st.number_input("–¶–µ–Ω–∞ –∑–∞ –≥–æ–¥ ($)", min_value=0.0, value=999.99)
                is_active = st.checkbox("–ê–∫—Ç–∏–≤–µ–Ω", value=True)
            
            features = st.text_area("–§—É–Ω–∫—Ü–∏–∏ (–ø–æ –æ–¥–Ω–æ–π –Ω–∞ —Å—Ç—Ä–æ–∫—É)", value="Unlimited items\nAPI access\nPriority support")
            limits = st.text_area("–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è (JSON)", value='{"max_items": 1000, "api_calls_per_hour": 10000}')
            
            if st.form_submit_button("–°–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω"):
                st.success("–ü–ª–∞–Ω —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
    
    with tab2:
        st.write("### –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π")
        
        # –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –ø–ª–∞—Ç–µ–∂–µ–π
        payments_data = []
        for i in range(20):
            payments_data.append({
                "ID": f"pay_{i+1:03d}",
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å": f"user_{i+1:03d}",
                "–°—É–º–º–∞": f"${(i+1) * 19.99:.2f}",
                "–°—Ç–∞—Ç—É—Å": ["completed", "pending", "failed"][i % 3],
                "–î–∞—Ç–∞": (datetime.now() - timedelta(days=i)).strftime("%Y-%m-%d"),
                "–ú–µ—Ç–æ–¥": ["stripe", "paypal"][i % 2]
            })
        
        df_payments = pd.DataFrame(payments_data)
        st.dataframe(df_payments, use_container_width=True)
    
    with tab3:
        st.write("### –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.write("**–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—ç—à–±–µ–∫–∞**")
            cashback_rate_pro = st.slider("–ö—ç—à–±–µ–∫ Pro (%)", 0.0, 10.0, 2.0)
            cashback_rate_premium = st.slider("–ö—ç—à–±–µ–∫ Premium (%)", 0.0, 10.0, 5.0)
            
            st.write("**–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤**")
            referral_reward = st.number_input("–ù–∞–≥—Ä–∞–¥–∞ –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ ($)", min_value=0.0, value=20.0)
        
        with col2:
            st.write("**–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π**")
            email_notifications = st.checkbox("Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", value=True)
            sms_notifications = st.checkbox("SMS —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", value=False)
            
            st.write("**–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏**")
            require_2fa = st.checkbox("–¢—Ä–µ–±–æ–≤–∞—Ç—å 2FA –¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π", value=True)
            auto_renew = st.checkbox("–ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é", value=True)
        
        if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"):
            st.success("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")

if __name__ == "__main__":
    main()
