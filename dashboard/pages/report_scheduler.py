"""–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –æ—Ç—á–µ—Ç–æ–≤ –≤ –¥–∞—à–±–æ—Ä–¥–µ"""

import streamlit as st
import pandas as pd
import plotly.express as px
import requests
import json
from datetime import datetime, timedelta
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Ç—á–µ—Ç–æ–≤ - Universal Parser",
    page_icon="üìÖ",
    layout="wide"
)

# API –±–∞–∑–æ–≤—ã–π URL
API_BASE_URL = "http://localhost:8000/api/v1"

def fetch_data(endpoint: str, params: dict = None, method: str = "GET", data: dict = None):
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å API"""
    try:
        if method == "GET":
            response = requests.get(f"{API_BASE_URL}/report-scheduler/{endpoint}", params=params)
        elif method == "POST":
            response = requests.post(f"{API_BASE_URL}/report-scheduler/{endpoint}", params=params, json=data)
        elif method == "PUT":
            response = requests.put(f"{API_BASE_URL}/report-scheduler/{endpoint}", params=params, json=data)
        elif method == "DELETE":
            response = requests.delete(f"{API_BASE_URL}/report-scheduler/{endpoint}", params=params)
        
        if response.status_code == 200:
            return response.json()
        else:
            st.error(f"–û—à–∏–±–∫–∞ API: {response.status_code} - {response.text}")
            return None
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

def main():
    st.title("üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Ç—á–µ—Ç–æ–≤")
    st.markdown("---")

    # –í—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
        ["user_1", "user_2", "user_3", "user_4", "user_5"],
        index=0
    )

    if not user_id:
        st.warning("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞–º–∏")
        return

    # –û—Å–Ω–æ–≤–Ω—ã–µ –≤–∫–ª–∞–¥–∫–∏
    tab1, tab2, tab3, tab4 = st.tabs([
        "üìä –ú–æ–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è", "‚ûï –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "üìã –®–∞–±–ª–æ–Ω—ã", "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
    ])

    with tab1:
        st.subheader("üìä –ú–æ–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        schedules_data = fetch_data("schedules", {"user_id": user_id})
        
        if schedules_data:
            schedules = schedules_data.get("schedules", [])
            
            if schedules:
                # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                df_schedules = pd.DataFrame(schedules)
                
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π
                st.dataframe(df_schedules, use_container_width=True)
                
                # –î–µ–π—Å—Ç–≤–∏—è —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è–º–∏
                st.subheader("üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è–º–∏")
                
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    selected_report = st.selectbox(
                        "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—á–µ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
                        [s["report_type"] for s in schedules]
                    )
                
                with col2:
                    action = st.selectbox(
                        "–î–µ–π—Å—Ç–≤–∏–µ:",
                        ["–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å", "–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ–π—á–∞—Å", "–£–¥–∞–ª–∏—Ç—å"]
                    )
                
                with col3:
                    if st.button("–í—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ"):
                        if action == "–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å":
                            # –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
                            current_schedule = next(s for s in schedules if s["report_type"] == selected_report)
                            new_status = not current_schedule["is_active"]
                            
                            result = fetch_data(
                                f"schedules/{selected_report}/toggle",
                                {"user_id": user_id, "is_active": new_status},
                                method="POST"
                            )
                            
                            if result:
                                st.success(f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ {'–≤–∫–ª—é—á–µ–Ω–æ' if new_status else '–≤—ã–∫–ª—é—á–µ–Ω–æ'}")
                                st.rerun()
                        
                        elif action == "–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ–π—á–∞—Å":
                            result = fetch_data(
                                f"schedules/{selected_report}/run-now",
                                {"user_id": user_id},
                                method="POST"
                            )
                            
                            if result:
                                st.success("–û—Ç—á–µ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é")
                        
                        elif action == "–£–¥–∞–ª–∏—Ç—å":
                            if st.checkbox("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ"):
                                result = fetch_data(
                                    f"schedules/{selected_report}",
                                    {"user_id": user_id},
                                    method="DELETE"
                                )
                                
                                if result:
                                    st.success("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ")
                                    st.rerun()
            else:
                st.info("–£ –≤–∞—Å –Ω–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π")
        else:
            st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")

    with tab2:
        st.subheader("‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
        
        # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω—ã –æ—Ç—á–µ—Ç–æ–≤
        templates_data = fetch_data("templates")
        
        if templates_data:
            templates = templates_data.get("templates", [])
            
            # –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
            with st.form("create_schedule_form"):
                col1, col2 = st.columns(2)
                
                with col1:
                    # –í—ã–±–æ—Ä —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞
                    report_options = {t["name"]: t["id"] for t in templates}
                    selected_report_name = st.selectbox("–¢–∏–ø –æ—Ç—á–µ—Ç–∞:", list(report_options.keys()))
                    selected_report_id = report_options[selected_report_name]
                    
                    # –û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
                    selected_template = next(t for t in templates if t["id"] == selected_report_id)
                    st.info(f"–û–ø–∏—Å–∞–Ω–∏–µ: {selected_template['description']}")
                    
                    # –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ
                    schedule_type = st.selectbox(
                        "–ß–∞—Å—Ç–æ—Ç–∞:",
                        ["daily", "weekly", "monthly"],
                        format_func=lambda x: {"daily": "–ï–∂–µ–¥–Ω–µ–≤–Ω–æ", "weekly": "–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ", "monthly": "–ï–∂–µ–º–µ—Å—è—á–Ω–æ"}[x]
                    )
                    
                    time_input = st.time_input("–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏:", value=datetime.strptime(selected_template.get("default_time", "09:00"), "%H:%M").time())
                    time_str = time_input.strftime("%H:%M")
                
                with col2:
                    # Email
                    email = st.text_input("Email –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:", value="user@example.com")
                    
                    # –§–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞
                    export_format = st.selectbox(
                        "–§–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞:",
                        ["pdf", "excel", "csv", "json"],
                        format_func=lambda x: {"pdf": "PDF", "excel": "Excel", "csv": "CSV", "json": "JSON"}[x]
                    )
                    
                    # –§–∏–ª—å—Ç—Ä—ã
                    st.subheader("üîç –§–∏–ª—å—Ç—Ä—ã")
                    
                    # –ü–µ—Ä–∏–æ–¥
                    period_type = st.selectbox("–ü–µ—Ä–∏–æ–¥:", ["–ü–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–Ω–µ–π", "–ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥"])
                    
                    if period_type == "–ü–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–Ω–µ–π":
                        days = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π:", min_value=1, max_value=365, value=7)
                        end_date = datetime.now().date()
                        start_date = end_date - timedelta(days=days)
                    else:
                        col_start, col_end = st.columns(2)
                        with col_start:
                            start_date = st.date_input("–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞:", value=datetime.now().date() - timedelta(days=7))
                        with col_end:
                            end_date = st.date_input("–ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞:", value=datetime.now().date())
                    
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
                    marketplace = st.selectbox(
                        "–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å:",
                        ["–í—Å–µ", "Wildberries", "Ozon", "Yandex Market", "Avito", "M.Video", "Eldorado", "AliExpress", "Amazon", "eBay"]
                    )
                    
                    category = st.selectbox(
                        "–ö–∞—Ç–µ–≥–æ—Ä–∏—è:",
                        ["–í—Å–µ", "–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞", "–û–¥–µ–∂–¥–∞", "–û–±—É–≤—å", "–î–æ–º –∏ —Å–∞–¥", "–ö—Ä–∞—Å–æ—Ç–∞", "–°–ø–æ—Ä—Ç", "–ê–≤—Ç–æ", "–î–µ—Ç—Å–∫–∏–µ —Ç–æ–≤–∞—Ä—ã", "–ö–Ω–∏–≥–∏"]
                    )
                
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
                filters = {
                    "start_date": start_date.isoformat(),
                    "end_date": end_date.isoformat()
                }
                
                if marketplace != "–í—Å–µ":
                    filters["marketplace"] = marketplace
                if category != "–í—Å–µ":
                    filters["category"] = category
                
                # –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è
                if st.form_submit_button("–°–æ–∑–¥–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"):
                    # –°–æ–∑–¥–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
                    schedule_data = {
                        "report_type": selected_report_id,
                        "schedule_type": schedule_type,
                        "time": time_str,
                        "email": email,
                        "filters": filters,
                        "export_format": export_format
                    }
                    
                    result = fetch_data(
                        "schedules",
                        {"user_id": user_id},
                        method="POST",
                        data=schedule_data
                    )
                    
                    if result:
                        st.success("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
                        st.rerun()
                    else:
                        st.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
        else:
            st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —à–∞–±–ª–æ–Ω—ã –æ—Ç—á–µ—Ç–æ–≤")

    with tab3:
        st.subheader("üìã –®–∞–±–ª–æ–Ω—ã –æ—Ç—á–µ—Ç–æ–≤")
        
        # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω—ã
        templates_data = fetch_data("templates")
        
        if templates_data:
            templates = templates_data.get("templates", [])
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —à–∞–±–ª–æ–Ω—ã
            for template in templates:
                with st.expander(f"üìä {template['name']}"):
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        st.write(f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {template['description']}")
                        st.write(f"**–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {template['category']}")
                        st.write(f"**–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —á–∞—Å—Ç–æ—Ç–∞:** {template['default_schedule']}")
                        st.write(f"**–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –≤—Ä–µ–º—è:** {template['default_time']}")
                    
                    with col2:
                        st.write("**–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:**")
                        for param in template['parameters']:
                            st.write(f"‚Ä¢ {param}")
                        
                        if st.button(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω", key=f"use_{template['id']}"):
                            st.session_state.selected_template = template['id']
                            st.rerun()
        else:
            st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —à–∞–±–ª–æ–Ω—ã")

    with tab4:
        st.subheader("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        status_data = fetch_data("status")
        
        if status_data:
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                st.metric(
                    "–°—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞",
                    "üü¢ –†–∞–±–æ—Ç–∞–µ—Ç" if status_data.get("is_running") else "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
                )
            
            with col2:
                st.metric(
                    "–í—Å–µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π",
                    status_data.get("total_schedules", 0)
                )
            
            with col3:
                st.metric(
                    "–ê–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π",
                    status_data.get("active_schedules", 0)
                )
            
            with col4:
                st.metric(
                    "–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞",
                    status_data.get("last_check", "N/A")[:19]
                )
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –æ—Ç—á–µ—Ç–æ–≤
        history_data = fetch_data("history", {"user_id": user_id, "limit": 20})
        
        if history_data:
            history = history_data.get("history", [])
            
            if history:
                st.subheader("üìã –ò—Å—Ç–æ—Ä–∏—è –æ—Ç—á–µ—Ç–æ–≤")
                
                # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
                df_history = pd.DataFrame(history)
                df_history['last_run'] = pd.to_datetime(df_history['last_run'])
                df_history['next_run'] = pd.to_datetime(df_history['next_run'])
                
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
                st.dataframe(df_history, use_container_width=True)
                
                # –ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ—Ç—á–µ—Ç–æ–≤
                st.subheader("üìä –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –æ—Ç—á–µ—Ç–æ–≤")
                
                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–Ω—è–º
                df_history['date'] = df_history['last_run'].dt.date
                daily_counts = df_history.groupby('date').size().reset_index(name='count')
                
                if not daily_counts.empty:
                    fig = px.bar(
                        daily_counts,
                        x='date',
                        y='count',
                        title='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ –ø–æ –¥–Ω—è–º',
                        labels={'count': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—á–µ—Ç–æ–≤', 'date': '–î–∞—Ç–∞'}
                    )
                    st.plotly_chart(fig, use_container_width=True)
                
                # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º –æ—Ç—á–µ—Ç–æ–≤
                report_counts = df_history['report_type'].value_counts()
                
                fig = px.pie(
                    report_counts,
                    values=report_counts.values,
                    names=report_counts.index,
                    title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤ –ø–æ —Ç–∏–ø–∞–º'
                )
                st.plotly_chart(fig, use_container_width=True)
            else:
                st.info("–ò—Å—Ç–æ—Ä–∏—è –æ—Ç—á–µ—Ç–æ–≤ –ø—É—Å—Ç–∞")
        else:
            st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –æ—Ç—á–µ—Ç–æ–≤")

    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –±—ã—Å—Ç—Ä—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏
    with st.sidebar:
        st.subheader("üöÄ –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è")
        
        if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"):
            st.rerun()
        
        if st.button("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"):
            result = fetch_data("start", method="POST")
            if result:
                st.success("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")
            else:
                st.error("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞")
        
        if st.button("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"):
            result = fetch_data("stop", method="POST")
            if result:
                st.success("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            else:
                st.error("–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞")
        
        st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        
        if schedules_data:
            st.metric("–í—Å–µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π", schedules_data.get("total_schedules", 0))
            st.metric("–ê–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π", schedules_data.get("active_schedules", 0))
        
        st.subheader("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        st.info("""
        **–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Ç—á–µ—Ç–æ–≤** –ø–æ–∑–≤–æ–ª—è–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç—á–µ—Ç—ã –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.
        
        **–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:**
        - PDF
        - Excel
        - CSV
        - JSON
        
        **–ß–∞—Å—Ç–æ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:**
        - –ï–∂–µ–¥–Ω–µ–≤–Ω–æ
        - –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ
        - –ï–∂–µ–º–µ—Å—è—á–Ω–æ
        """)

if __name__ == "__main__":
    main()


