"""–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤ –≤ –¥–∞—à–±–æ—Ä–¥–µ"""

import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta
import requests
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–†–æ—Å—Å–∏–π—Å–∫–∏–µ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ã - Universal Parser",
    page_icon="üá∑üá∫",
    layout="wide"
)

# API –±–∞–∑–æ–≤—ã–π URL
API_BASE_URL = "http://localhost:8000/api/v1"

def get_marketplaces():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤"""
    try:
        response = requests.get(f"{API_BASE_URL}/russian-marketplaces/marketplaces")
        if response.status_code == 200:
            return response.json()["marketplaces"]
        return []
    except:
        return []

def search_products(marketplace, query, page=1, filters=None):
    """–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ"""
    try:
        params = {
            "query": query,
            "page": page
        }
        if filters:
            params.update(filters)
        
        response = requests.get(f"{API_BASE_URL}/russian-marketplaces/{marketplace}/search", params=params)
        if response.status_code == 200:
            return response.json()
        return None
    except:
        return None

def get_marketplace_categories(marketplace):
    """–ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞"""
    try:
        response = requests.get(f"{API_BASE_URL}/russian-marketplaces/{marketplace}/categories")
        if response.status_code == 200:
            return response.json()["categories"]
        return {}
    except:
        return {}

def get_marketplace_filters(marketplace):
    """–ü–æ–ª—É—á–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞"""
    try:
        response = requests.get(f"{API_BASE_URL}/russian-marketplaces/{marketplace}/filters")
        if response.status_code == 200:
            return response.json()["filters"]
        return {}
    except:
        return {}

def main():
    st.title("üá∑üá∫ –†–æ—Å—Å–∏–π—Å–∫–∏–µ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ã")
    st.markdown("---")

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤
    marketplaces = get_marketplaces()
    
    if not marketplaces:
        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤")
        return

    # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞
    marketplace_names = [mp["name"] for mp in marketplaces]
    selected_marketplace = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å:", marketplace_names)
    
    # –ù–∞—Ö–æ–¥–∏–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å
    current_marketplace = next((mp for mp in marketplaces if mp["name"] == selected_marketplace), None)
    
    if not current_marketplace:
        st.error("–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    st.markdown(f"### {current_marketplace['name']}")
    st.markdown(f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {current_marketplace['description']}")
    st.markdown(f"**URL:** {current_marketplace['url']}")
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    tab1, tab2, tab3, tab4 = st.tabs(["üîç –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"])
    
    with tab1:
        st.subheader("–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤")
        
        # –§–æ—Ä–º–∞ –ø–æ–∏—Å–∫–∞
        with st.form("search_form"):
            col1, col2 = st.columns([3, 1])
            
            with col1:
                query = st.text_input("–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:", placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞...")
            
            with col2:
                page = st.number_input("–°—Ç—Ä–∞–Ω–∏—Ü–∞:", min_value=1, value=1)
            
            # –§–∏–ª—å—Ç—Ä—ã
            st.markdown("**–§–∏–ª—å—Ç—Ä—ã:**")
            col1, col2, col3 = st.columns(3)
            
            with col1:
                price_min = st.number_input("–¶–µ–Ω–∞ –æ—Ç:", min_value=0, value=0)
                price_max = st.number_input("–¶–µ–Ω–∞ –¥–æ:", min_value=0, value=0)
                brand = st.text_input("–ë—Ä–µ–Ω–¥:", placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: Apple")
            
            with col2:
                rating = st.slider("–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥:", 0.0, 5.0, 0.0, 0.1)
                discount = st.checkbox("–¢–æ–ª—å–∫–æ —Å–æ —Å–∫–∏–¥–∫–æ–π")
                in_stock = st.checkbox("–¢–æ–ª—å–∫–æ –≤ –Ω–∞–ª–∏—á–∏–∏")
            
            with col3:
                if current_marketplace["id"] == "avito":
                    region = st.text_input("–†–µ–≥–∏–æ–Ω:", placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: moskva")
                    category = st.selectbox("–ö–∞—Ç–µ–≥–æ—Ä–∏—è:", ["", "electronics", "clothing", "home", "beauty", "sports", "kids"])
                    condition = st.selectbox("–°–æ—Å—Ç–æ—è–Ω–∏–µ:", ["", "new", "used", "broken"])
                else:
                    region = None
                    category = None
                    condition = None
            
            if st.form_submit_button("üîç –ù–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä—ã"):
                if query:
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
                    filters = {}
                    if price_min > 0:
                        filters["price_min"] = price_min
                    if price_max > 0:
                        filters["price_max"] = price_max
                    if brand:
                        filters["brand"] = brand
                    if rating > 0:
                        filters["rating"] = rating
                    if discount:
                        filters["discount"] = True
                    if in_stock:
                        filters["in_stock"] = True
                    if region:
                        filters["region"] = region
                    if category:
                        filters["category"] = category
                    if condition:
                        filters["condition"] = condition
                    
                    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
                    with st.spinner("–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤..."):
                        results = search_products(current_marketplace["id"], query, page, filters)
                    
                    if results and results.get("products"):
                        products = results["products"]
                        st.success(f"–ù–∞–π–¥–µ–Ω–æ {len(products)} —Ç–æ–≤–∞—Ä–æ–≤")
                        
                        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã
                        for i, product in enumerate(products):
                            with st.expander(f"üõçÔ∏è {product.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} - {product.get('price', 0):.0f} ‚ÇΩ"):
                                col1, col2 = st.columns([2, 1])
                                
                                with col1:
                                    st.write(f"**–¶–µ–Ω–∞:** {product.get('price', 0):.0f} ‚ÇΩ")
                                    if product.get('old_price', 0) > 0:
                                        st.write(f"**–°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞:** {product.get('old_price', 0):.0f} ‚ÇΩ")
                                    if product.get('rating', 0) > 0:
                                        st.write(f"**–†–µ–π—Ç–∏–Ω–≥:** {product.get('rating', 0):.1f} ‚≠ê")
                                    if product.get('reviews_count', 0) > 0:
                                        st.write(f"**–û—Ç–∑—ã–≤—ã:** {product.get('reviews_count', 0)}")
                                    if product.get('brand'):
                                        st.write(f"**–ë—Ä–µ–Ω–¥:** {product.get('brand')}")
                                    if product.get('category'):
                                        st.write(f"**–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {product.get('category')}")
                                    if product.get('seller'):
                                        st.write(f"**–ü—Ä–æ–¥–∞–≤–µ—Ü:** {product.get('seller')}")
                                    if product.get('discount', 0) > 0:
                                        st.write(f"**–°–∫–∏–¥–∫–∞:** {product.get('discount', 0)}%")
                                    if product.get('stock', 0) > 0:
                                        st.write(f"**–í –Ω–∞–ª–∏—á–∏–∏:** {product.get('stock', 0)} —à—Ç.")
                                
                                with col2:
                                    if product.get('images'):
                                        st.image(product['images'][0], width=150)
                                    if product.get('url'):
                                        st.link_button("–û—Ç–∫—Ä—ã—Ç—å —Ç–æ–≤–∞—Ä", product['url'])
                    else:
                        st.warning("–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                else:
                    st.warning("–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å")
    
    with tab2:
        st.subheader("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        try:
            response = requests.get(f"{API_BASE_URL}/russian-marketplaces/{current_marketplace['id']}/stats")
            if response.status_code == 200:
                stats = response.json()["stats"]
                
                # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
                col1, col2, col3, col4 = st.columns(4)
                
                with col1:
                    st.metric(
                        label="–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤",
                        value=f"{stats['total_products']:,}",
                        delta="+5% –∑–∞ –º–µ—Å—è—Ü"
                    )
                
                with col2:
                    st.metric(
                        label="–ö–∞—Ç–µ–≥–æ—Ä–∏–π",
                        value=stats['categories'],
                        delta="+2"
                    )
                
                with col3:
                    st.metric(
                        label="–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞",
                        value=f"{stats['avg_price']:,.0f} ‚ÇΩ",
                        delta="+3%"
                    )
                
                with col4:
                    st.metric(
                        label="–û–±–Ω–æ–≤–ª–µ–Ω–æ",
                        value=stats['last_updated'][:10],
                        delta="–°–µ–≥–æ–¥–Ω—è"
                    )
                
                # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –±—Ä–µ–Ω–¥—ã
                st.subheader("–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –±—Ä–µ–Ω–¥—ã")
                brands_df = pd.DataFrame({
                    '–ë—Ä–µ–Ω–¥': stats['popular_brands'],
                    '–ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å': [100, 85, 70, 60, 50]  # –ó–∞–≥–ª—É—à–∫–∞
                })
                
                fig_brands = px.bar(brands_df, x='–ë—Ä–µ–Ω–¥', y='–ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å', 
                                  title='–¢–æ–ø-5 –±—Ä–µ–Ω–¥–æ–≤ –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏')
                st.plotly_chart(fig_brands, use_container_width=True)
                
            else:
                st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
        except:
            st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    
    with tab3:
        st.subheader("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        categories = get_marketplace_categories(current_marketplace["id"])
        
        if categories:
            # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            categories_df = pd.DataFrame([
                {"–ö–∞—Ç–µ–≥–æ—Ä–∏—è (EN)": key, "–ö–∞—Ç–µ–≥–æ—Ä–∏—è (RU)": value} 
                for key, value in categories.items()
            ])
            
            st.dataframe(categories_df, use_container_width=True)
            
            # –ì—Ä–∞—Ñ–∏–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            fig_categories = px.pie(
                values=[1] * len(categories), 
                names=list(categories.values()),
                title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"
            )
            st.plotly_chart(fig_categories, use_container_width=True)
        else:
            st.warning("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    with tab4:
        st.subheader("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        filters = get_marketplace_filters(current_marketplace["id"])
        
        if filters:
            st.write("**–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã:**")
            for key, value in filters.items():
                st.write(f"‚Ä¢ **{key}:** {value}")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
        st.write("**–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞:**")
        
        col1, col2 = st.columns(2)
        
        with col1:
            delay_min = st.number_input("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ (—Å–µ–∫):", min_value=0, value=1)
            delay_max = st.number_input("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ (—Å–µ–∫):", min_value=0, value=3)
            max_retries = st.number_input("–ú–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫:", min_value=1, value=3)
        
        with col2:
            use_proxy = st.checkbox("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–∫—Å–∏")
            rotate_headers = st.checkbox("–†–æ—Ç–∞—Ü–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤")
            cache_results = st.checkbox("–ö—ç—à–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
        
        if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"):
            st.success("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
        
        # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        st.write("**–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:**")
        if st.button("üîó –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"):
            with st.spinner("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è..."):
                try:
                    response = requests.get(f"{API_BASE_URL}/russian-marketplaces/{current_marketplace['id']}/categories", timeout=5)
                    if response.status_code == 200:
                        st.success("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
                    else:
                        st.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
                except:
                    st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è")

if __name__ == "__main__":
    main()
