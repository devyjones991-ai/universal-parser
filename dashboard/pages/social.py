"""–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –≤ –¥–∞—à–±–æ—Ä–¥–µ"""

import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta
import requests
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ - Universal Parser",
    page_icon="üë•",
    layout="wide"
)

# API –±–∞–∑–æ–≤—ã–π URL
API_BASE_URL = "http://localhost:8000/api/v1"

def get_user_profile(user_id: str):
    """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        response = requests.get(f"{API_BASE_URL}/social/profiles/{user_id}")
        if response.status_code == 200:
            return response.json()
        return None
    except:
        return None

def get_user_stats(user_id: str):
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        response = requests.get(f"{API_BASE_URL}/social/profiles/{user_id}/stats")
        if response.status_code == 200:
            return response.json()
        return None
    except:
        return None

def get_social_feed(user_id: str, page: int = 1):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–æ—Ü–∏–∞–ª—å–Ω—É—é –ª–µ–Ω—Ç—É"""
    try:
        response = requests.get(f"{API_BASE_URL}/social/feed", params={
            "user_id": user_id,
            "page": page,
            "limit": 20
        })
        if response.status_code == 200:
            return response.json()
        return None
    except:
        return None

def get_leaderboard(leaderboard_id: str):
    """–ü–æ–ª—É—á–∏—Ç—å –ª–∏–¥–µ—Ä–±–æ—Ä–¥"""
    try:
        response = requests.get(f"{API_BASE_URL}/social/leaderboards/{leaderboard_id}")
        if response.status_code == 200:
            return response.json()
        return None
    except:
        return None

def get_achievements():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"""
    try:
        response = requests.get(f"{API_BASE_URL}/social/achievements")
        if response.status_code == 200:
            return response.json()
        return []
    except:
        return []

def main():
    st.title("üë• –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—è")
    st.markdown("---")

    # –í—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
        ["user_1", "user_2", "user_3", "user_4", "user_5"],
        index=0
    )

    if not user_id:
        st.warning("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π")
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    profile = get_user_profile(user_id)
    stats = get_user_stats(user_id)

    if not profile or not stats:
        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return

    # –û—Å–Ω–æ–≤–Ω—ã–µ –≤–∫–ª–∞–¥–∫–∏
    tab1, tab2, tab3, tab4, tab5 = st.tabs([
        "üë§ –ü—Ä–æ—Ñ–∏–ª—å", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üì± –°–æ—Ü–∏–∞–ª—å–Ω–∞—è –ª–µ–Ω—Ç–∞", 
        "üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è", "üìà –õ–∏–¥–µ—Ä–±–æ—Ä–¥—ã"
    ])

    with tab1:
        st.subheader("üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        
        col1, col2 = st.columns([1, 2])
        
        with col1:
            # –ê–≤–∞—Ç–∞—Ä
            if profile.get('avatar_url'):
                st.image(profile['avatar_url'], width=150)
            else:
                st.image("https://via.placeholder.com/150x150/cccccc/666666?text=Avatar", width=150)
            
            # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            st.write(f"**–ò–º—è:** {profile.get('display_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
            st.write(f"**–£—Ä–æ–≤–µ–Ω—å:** {profile.get('level', 1)}")
            st.write(f"**–û—á–∫–∏ –æ–ø—ã—Ç–∞:** {profile.get('experience_points', 0):,}")
            st.write(f"**–û–±—â–∏–µ –æ—á–∫–∏:** {profile.get('total_points', 0):,}")
            st.write(f"**–†–µ–ø—É—Ç–∞—Ü–∏—è:** {profile.get('reputation', 0)}")
        
        with col2:
            # –ë–∏–æ–≥—Ä–∞—Ñ–∏—è
            st.write("**–û —Å–µ–±–µ:**")
            st.write(profile.get('bio', '–ë–∏–æ–≥—Ä–∞—Ñ–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞'))
            
            # –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            col2_1, col2_2 = st.columns(2)
            with col2_1:
                st.write(f"**–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:** {profile.get('location', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
                st.write(f"**–í–µ–±-—Å–∞–π—Ç:** {profile.get('website', '–ù–µ —É–∫–∞–∑–∞–Ω')}")
            with col2_2:
                st.write(f"**–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ –æ–Ω–ª–∞–π–Ω:** {profile.get('last_seen', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                st.write(f"**–ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω:** {profile.get('created_at', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')[:10]}")

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏
        st.subheader("üîí –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏")
        col3, col4 = st.columns(2)
        
        with col3:
            st.write(f"**–ü—É–±–ª–∏—á–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å:** {'‚úÖ' if profile.get('is_public') else '‚ùå'}")
            st.write(f"**–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å email:** {'‚úÖ' if profile.get('show_email') else '‚ùå'}")
            st.write(f"**–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω:** {'‚úÖ' if profile.get('show_phone') else '‚ùå'}")
        
        with col4:
            st.write(f"**–ü—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã –≤ –¥—Ä—É–∑—å—è:** {'‚úÖ' if profile.get('allow_friend_requests') else '‚ùå'}")
            st.write(f"**–ü—Ä–∏–Ω–∏–º–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è:** {'‚úÖ' if profile.get('allow_messages') else '‚ùå'}")

    with tab2:
        st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric(
                label="–î—Ä—É–∑—å—è",
                value=stats.get('friends_count', 0),
                delta="+2 –∑–∞ –Ω–µ–¥–µ–ª—é"
            )
        
        with col2:
            st.metric(
                label="–ü–æ–¥–ø–∏—Å—á–∏–∫–∏",
                value=stats.get('followers_count', 0),
                delta="+5 –∑–∞ –Ω–µ–¥–µ–ª—é"
            )
        
        with col3:
            st.metric(
                label="–ü–æ—Å—Ç—ã",
                value=stats.get('posts_count', 0),
                delta="+1 –∑–∞ –¥–µ–Ω—å"
            )
        
        with col4:
            st.metric(
                label="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏",
                value=stats.get('comments_count', 0),
                delta="+3 –∑–∞ –¥–µ–Ω—å"
            )

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        col5, col6, col7, col8 = st.columns(4)
        
        with col5:
            st.metric(
                label="–õ–∞–π–∫–∏ –ø–æ–ª—É—á–µ–Ω–æ",
                value=stats.get('likes_received', 0),
                delta="+10 –∑–∞ –Ω–µ–¥–µ–ª—é"
            )
        
        with col6:
            st.metric(
                label="–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è",
                value=stats.get('achievements_count', 0),
                delta="+1 –∑–∞ –º–µ—Å—è—Ü"
            )
        
        with col7:
            st.metric(
                label="–ì—Ä—É–ø–ø—ã",
                value=stats.get('groups_count', 0),
                delta="+1 –∑–∞ –º–µ—Å—è—Ü"
            )
        
        with col8:
            st.metric(
                label="–†–µ–ø—É—Ç–∞—Ü–∏—è",
                value=stats.get('reputation', 0),
                delta="+5 –∑–∞ –Ω–µ–¥–µ–ª—é"
            )

        # –ì—Ä–∞—Ñ–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        st.subheader("üìà –ì—Ä–∞—Ñ–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
        
        col1, col2 = st.columns(2)
        
        with col1:
            # –ì—Ä–∞—Ñ–∏–∫ –ø–æ—Å—Ç–æ–≤ –ø–æ –¥–Ω—è–º
            dates = pd.date_range(start=datetime.now() - timedelta(days=30), end=datetime.now(), freq='D')
            posts_data = [max(0, int(stats.get('posts_count', 0) / 30) + (i % 3)) for i in range(30)]
            
            df_posts = pd.DataFrame({
                '–î–∞—Ç–∞': dates,
                '–ü–æ—Å—Ç—ã': posts_data
            })
            
            fig_posts = px.line(df_posts, x='–î–∞—Ç–∞', y='–ü–æ—Å—Ç—ã', title='–ü–æ—Å—Ç—ã –ø–æ –¥–Ω—è–º')
            st.plotly_chart(fig_posts, use_container_width=True)
        
        with col2:
            # –ì—Ä–∞—Ñ–∏–∫ –ª–∞–π–∫–æ–≤
            likes_data = [max(0, int(stats.get('likes_received', 0) / 30) + (i % 5)) for i in range(30)]
            
            df_likes = pd.DataFrame({
                '–î–∞—Ç–∞': dates,
                '–õ–∞–π–∫–∏': likes_data
            })
            
            fig_likes = px.bar(df_likes, x='–î–∞—Ç–∞', y='–õ–∞–π–∫–∏', title='–õ–∞–π–∫–∏ –ø–æ –¥–Ω—è–º')
            st.plotly_chart(fig_likes, use_container_width=True)

    with tab3:
        st.subheader("üì± –°–æ—Ü–∏–∞–ª—å–Ω–∞—è –ª–µ–Ω—Ç–∞")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ü–∏–∞–ª—å–Ω—É—é –ª–µ–Ω—Ç—É
        feed = get_social_feed(user_id)
        
        if feed and feed.get('posts'):
            posts = feed['posts']
            st.success(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(posts)} –ø–æ—Å—Ç–æ–≤")
            
            for post in posts:
                with st.expander(f"üìù {post.get('content', '–ë–µ–∑ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è')[:50]}..."):
                    col1, col2 = st.columns([3, 1])
                    
                    with col1:
                        st.write(f"**–ê–≤—Ç–æ—Ä:** {post.get('author', {}).get('display_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                        st.write(f"**–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:** {post.get('content', '')}")
                        st.write(f"**–¢–∏–ø:** {post.get('post_type', 'text')}")
                        if post.get('marketplace'):
                            st.write(f"**–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å:** {post.get('marketplace')}")
                    
                    with col2:
                        st.write(f"**–õ–∞–π–∫–∏:** {post.get('like_count', 0)} ‚ù§Ô∏è")
                        st.write(f"**–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:** {post.get('comment_count', 0)} üí¨")
                        st.write(f"**–ü—Ä–æ—Å–º–æ—Ç—Ä—ã:** {post.get('view_count', 0)} üëÅÔ∏è")
                        st.write(f"**–î–∞—Ç–∞:** {post.get('created_at', '')[:10]}")
        else:
            st.info("–°–æ—Ü–∏–∞–ª—å–Ω–∞—è –ª–µ–Ω—Ç–∞ –ø—É—Å—Ç–∞")

    with tab4:
        st.subheader("üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        achievements = get_achievements()
        
        if achievements:
            # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            achievements_data = []
            for achievement in achievements:
                achievements_data.append({
                    "–ù–∞–∑–≤–∞–Ω–∏–µ": achievement.get('name', ''),
                    "–û–ø–∏—Å–∞–Ω–∏–µ": achievement.get('description', ''),
                    "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": achievement.get('category', ''),
                    "–¢–∏–ø": achievement.get('type', ''),
                    "–ù–∞–≥—Ä–∞–¥–∞": f"{achievement.get('points_reward', 0)} –æ—á–∫–æ–≤",
                    "–°–∫—Ä—ã—Ç–æ–µ": "‚úÖ" if achievement.get('is_hidden') else "‚ùå"
                })
            
            df_achievements = pd.DataFrame(achievements_data)
            st.dataframe(df_achievements, use_container_width=True)
            
            # –ì—Ä–∞—Ñ–∏–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            category_counts = df_achievements['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'].value_counts()
            fig_categories = px.pie(
                values=category_counts.values,
                names=category_counts.index,
                title="–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"
            )
            st.plotly_chart(fig_categories, use_container_width=True)
        else:
            st.warning("–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

    with tab5:
        st.subheader("üìà –õ–∏–¥–µ—Ä–±–æ—Ä–¥—ã")
        
        # –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –¥–ª—è –ª–∏–¥–µ—Ä–±–æ—Ä–¥–æ–≤
        leaderboards_data = [
            {"id": "parsing", "name": "–ü–∞—Ä—Å–∏–Ω–≥ —Ç–æ–≤–∞—Ä–æ–≤", "category": "parsing"},
            {"id": "social", "name": "–°–æ—Ü–∏–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", "category": "social"},
            {"id": "trading", "name": "–¢–æ—Ä–≥–æ–≤–ª—è", "category": "trading"}
        ]
        
        selected_leaderboard = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ª–∏–¥–µ—Ä–±–æ—Ä–¥:",
            [lb["name"] for lb in leaderboards_data]
        )
        
        # –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –¥–ª—è –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞
        demo_entries = []
        for i in range(20):
            demo_entries.append({
                "rank": i + 1,
                "user": f"user_{i+1}",
                "score": 1000 - (i * 50),
                "level": max(1, 10 - i),
                "points": 1000 - (i * 50)
            })
        
        df_leaderboard = pd.DataFrame(demo_entries)
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ª–∏–¥–µ—Ä–±–æ—Ä–¥
        st.dataframe(
            df_leaderboard[['rank', 'user', 'score', 'level']],
            use_container_width=True,
            hide_index=True
        )
        
        # –ì—Ä–∞—Ñ–∏–∫ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞
        fig_leaderboard = px.bar(
            df_leaderboard.head(10),
            x='user',
            y='score',
            title=f"–¢–æ–ø-10 –≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–µ '{selected_leaderboard}'"
        )
        fig_leaderboard.update_xaxes(tickangle=45)
        st.plotly_chart(fig_leaderboard, use_container_width=True)

    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –±—ã—Å—Ç—Ä—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏
    with st.sidebar:
        st.subheader("üöÄ –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è")
        
        if st.button("üìù –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç"):
            st.info("–§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞")
        
        if st.button("üë• –ù–∞–π—Ç–∏ –¥—Ä—É–∑–µ–π"):
            st.info("–§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –¥—Ä—É–∑–µ–π –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞")
        
        if st.button("üèÜ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è"):
            st.info("–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞")
        
        if st.button("üìä –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"):
            st.rerun()
        
        st.subheader("üìà –ü—Ä–æ–≥—Ä–µ—Å—Å —É—Ä–æ–≤–Ω—è")
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä —É—Ä–æ–≤–Ω—è
        current_level = profile.get('level', 1)
        current_exp = profile.get('experience_points', 0)
        required_exp = current_level * 1000
        progress = min(100, (current_exp / required_exp) * 100) if required_exp > 0 else 0
        
        st.progress(progress / 100)
        st.write(f"–£—Ä–æ–≤–µ–Ω—å {current_level}")
        st.write(f"–û–ø—ã—Ç: {current_exp:,} / {required_exp:,}")
        
        if progress >= 100:
            st.success("üéâ –ì–æ—Ç–æ–≤ –∫ –ø–æ–≤—ã—à–µ–Ω–∏—é —É—Ä–æ–≤–Ω—è!")

if __name__ == "__main__":
    main()


