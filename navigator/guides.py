"""–°–ø—Ä–∞–≤–æ—á–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–∞—Ä—Å–µ—Ä–∞."""
from __future__ import annotations

from dataclasses import dataclass
from datetime import datetime, timezone
from typing import Dict, List, Tuple

__all__ = [
    "GuideSection",
    "GUIDES",
    "get_section",
    "update_section",
    "list_sections",
    "get_paginated_faq",
]


@dataclass(slots=True)
class GuideSection:
    """–û—Ç–¥–µ–ª—å–Ω–∞—è —Å–µ–∫—Ü–∏—è —Å–ø—Ä–∞–≤–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."""

    title: str
    content: List[str]
    updated_at: datetime
    editable: bool = False

    def as_text(self) -> str:
        return "\n".join(self.content)


GUIDES: Dict[str, GuideSection] = {
    "quickstart": GuideSection(
        title="–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç",
        content=[
            "1. –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–ª–∏ –ø–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ URL.",
            "2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /parse –∏–ª–∏ /run –≤ –±–æ—Ç–µ.",
            "3. –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.",
        ],
        updated_at=datetime.now(timezone.utc),
        editable=False,
    ),
    "roadmap": GuideSection(
        title="–î–æ—Ä–æ–∂–Ω–∞—è –∫–∞—Ä—Ç–∞",
        content=[
            "‚úîÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–æ–≤—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ —ç–∫—Å–ø–æ—Ä—Ç–∞.",
            "üîÑ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å CRM –¥–ª—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤.",
            "üß† –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö.",
        ],
        updated_at=datetime.now(timezone.utc),
        editable=True,
    ),
    "faq": GuideSection(
        title="FAQ",
        content=[
            "Q: –ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å?",
            "A: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ JSON-—Ñ–∞–π–ª –≤ –∫–∞—Ç–∞–ª–æ–≥–µ profiles.",
            "Q: –ú–æ–∂–Ω–æ –ª–∏ –∑–∞–ø—É—Å–∫–∞—Ç—å –ø–∞—Ä—Å–µ—Ä –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é?",
            "A: –î–∞, —á–µ—Ä–µ–∑ cron –∏–ª–∏ –≤–Ω–µ—à–Ω–∏–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∏.",
            "Q: –ì–¥–µ —Ö—Ä–∞–Ω–∏—Ç—Å—è –∏—Å—Ç–æ—Ä–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤?",
            "A: –í SQLite –±–∞–∑–µ, —É–ø—Ä–∞–≤–ª—è–µ–º–æ–π –º–æ–¥—É–ª–µ–º db.py.",
        ],
        updated_at=datetime.now(timezone.utc),
        editable=True,
    ),
}


def list_sections() -> List[Tuple[str, GuideSection]]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–µ–∫—Ü–∏–π —Å –∫–ª—é—á–∞–º–∏."""

    return sorted(GUIDES.items(), key=lambda item: item[0])


def get_section(key: str) -> GuideSection:
    if key not in GUIDES:
        raise KeyError(f"–°–µ–∫—Ü–∏—è '{key}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    return GUIDES[key]


def update_section(key: str, content: List[str]) -> GuideSection:
    section = get_section(key)
    if not section.editable:
        raise PermissionError("–°–µ–∫—Ü–∏—è –∑–∞—â–∏—â–µ–Ω–∞ –æ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    section.content = content
    section.updated_at = datetime.now(timezone.utc)
    return section


def get_paginated_faq(page: int = 1, per_page: int = 2) -> Tuple[List[str], int]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç FAQ –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ."""

    faq = get_section("faq")
    total_items = len(faq.content) // 2  # –í FAQ –ø–∞—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤/–æ—Ç–≤–µ—Ç–æ–≤
    start = (page - 1) * per_page * 2
    end = start + per_page * 2
    items = faq.content[start:end]
    pages = max(1, (total_items + per_page - 1) // per_page)
    return items, pages
