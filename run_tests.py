#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏
"""
import sys
import subprocess
import argparse
from pathlib import Path


def run_command(command, description):
    """–ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã —Å –≤—ã–≤–æ–¥–æ–º –æ–ø–∏—Å–∞–Ω–∏—è"""
    print(f"\n{'='*60}")
    print(f"üß™ {description}")
    print(f"{'='*60}")
    print(f"–ö–æ–º–∞–Ω–¥–∞: {command}")
    print()
    
    try:
        result = subprocess.run(command, shell=True, check=True, capture_output=True, text=True)
        print(result.stdout)
        if result.stderr:
            print("STDERR:", result.stderr)
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {e}")
        print("STDOUT:", e.stdout)
        print("STDERR:", e.stderr)
        return False


def main():
    parser = argparse.ArgumentParser(description="–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ Universal Parser")
    parser.add_argument("--type", choices=["unit", "integration", "performance", "all"], 
                       default="all", help="–¢–∏–ø —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞")
    parser.add_argument("--coverage", action="store_true", help="–í–∫–ª—é—á–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–∫—Ä—ã—Ç–∏—è")
    parser.add_argument("--parallel", action="store_true", help="–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ")
    parser.add_argument("--verbose", "-v", action="store_true", help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥")
    parser.add_argument("--fast", action="store_true", help="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –º–µ–¥–ª–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã")
    
    args = parser.parse_args()
    
    # –ë–∞–∑–æ–≤—ã–µ –æ–ø—Ü–∏–∏ pytest
    pytest_args = ["pytest"]
    
    if args.verbose:
        pytest_args.append("-v")
    else:
        pytest_args.append("-q")
    
    if args.coverage:
        pytest_args.extend(["--cov=.", "--cov-report=html", "--cov-report=term-missing"])
    
    if args.parallel:
        pytest_args.extend(["-n", "auto"])
    
    if args.fast:
        pytest_args.extend(["-m", "not slow"])
    
    # –í—ã–±–æ—Ä —Ç–∏–ø–∞ —Ç–µ—Å—Ç–æ–≤
    if args.type == "unit":
        pytest_args.extend(["-m", "not integration and not slow"])
    elif args.type == "integration":
        pytest_args.extend(["-m", "integration"])
    elif args.type == "performance":
        pytest_args.extend(["-m", "slow"])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ —Ç–µ—Å—Ç–∞–º
    pytest_args.append("tests/")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É
    command = " ".join(pytest_args)
    
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ Universal Parser")
    print(f"üìä –¢–∏–ø —Ç–µ—Å—Ç–æ–≤: {args.type}")
    print(f"üìà –ü–æ–∫—Ä—ã—Ç–∏–µ: {'–î–∞' if args.coverage else '–ù–µ—Ç'}")
    print(f"‚ö° –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ: {'–î–∞' if args.parallel else '–ù–µ—Ç'}")
    print(f"üèÉ –ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º: {'–î–∞' if args.fast else '–ù–µ—Ç'}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    success = run_command(command, "–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤")
    
    if success:
        print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        
        if args.coverage:
            print("\nüìä –û—Ç—á–µ—Ç –æ –ø–æ–∫—Ä—ã—Ç–∏–∏ —Å–æ–∑–¥–∞–Ω –≤ htmlcov/index.html")
        
        return 0
    else:
        print("\n‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å!")
        return 1


if __name__ == "__main__":
    sys.exit(main())
