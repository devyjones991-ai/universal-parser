import asyncio
import io
import json
from contextlib import contextmanager

import pandas as pd
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import BufferedInputFile

from config import settings, parsing_profiles
from database import get_session
from db import get_recent_results, save_results
from parser import UniversalParser
from profiles.service import ProfileService

bot = Bot(token=settings.TELEGRAM_BOT_TOKEN)
dp = Dispatcher()


@contextmanager
def profile_scope(message: types.Message):
    """–°–æ–∑–¥–∞—ë—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–µ—Ä–≤–∏—Å."""

    session = get_session()
    try:
        service = ProfileService(session)
        user = message.from_user
        profile = service.get_or_create_profile(
            telegram_id=user.id,
            username=user.username,
            full_name=getattr(user, "full_name", None),
            language_code=getattr(user, "language_code", None),
        )
        yield profile, service
    finally:
        session.close()


def get_profile_settings(service: ProfileService, profile) -> dict:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è."""

    return {setting.key: setting.value for setting in service.list_settings(profile)}


def log_profile_action(
    service: ProfileService,
    profile,
    action: str,
    payload: str | None = None,
):
    """–§–∏–∫—Å–∏—Ä—É–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏–∏."""

    service.add_history(profile, action=action, payload=payload)


def get_message_payload(message: types.Message) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏–∏."""

    return message.text or message.caption or ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
def is_admin(user_id: int) -> bool:
    return user_id == settings.TELEGRAM_CHAT_ID or user_id in settings.ADMIN_CHAT_IDS

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    with profile_scope(message) as (profile, service):
        if not is_admin(message.from_user.id):
            log_profile_action(
                service,
                profile,
                "access_denied",
                payload=get_message_payload(message),
            )
            await message.reply("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
            return

        log_profile_action(
            service,
            profile,
            "command_start",
            payload=get_message_payload(message),
        )

        await message.reply(
            "üöÄ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –∑–∞–ø—É—â–µ–Ω!\n\n"
            "–ö–æ–º–∞–Ω–¥—ã:\n"
            "/profiles - —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Ñ–∏–ª–µ–π\n"
            "/parse <url> - –ø–∞—Ä—Å–∏—Ç—å URL\n"
            "/run <profile> - –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å\n"
            "/results - –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã\n"
            "/export - —ç–∫—Å–ø–æ—Ä—Ç –≤ Excel/CSV"
        )

@dp.message(Command("profiles"))
async def cmd_profiles(message: types.Message):
    with profile_scope(message) as (profile, service):
        if not is_admin(message.from_user.id):
            log_profile_action(
                service,
                profile,
                "access_denied",
                payload=get_message_payload(message),
            )
            return

        log_profile_action(
            service,
            profile,
            "command_profiles",
            payload=get_message_payload(message),
        )

        if not parsing_profiles:
            await message.reply("‚ùå –ü—Ä–æ—Ñ–∏–ª–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            return

        text = "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏:\n\n"
        for key, profile_cfg in parsing_profiles.items():
            text += f"üî∏ `{key}` - {profile_cfg['name']}\n"

        await message.reply(text, parse_mode="Markdown")

@dp.message(Command("parse"))
async def cmd_parse(message: types.Message):
    with profile_scope(message) as (profile, service):
        if not is_admin(message.from_user.id):
            log_profile_action(
                service,
                profile,
                "access_denied",
                payload=get_message_payload(message),
            )
            return

        args = (message.text or "").split(" ", 1)
        if len(args) < 2 or not args[1].strip():
            await message.reply("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /parse <url>")
            return

        url = args[1].strip()
        log_profile_action(
            service,
            profile,
            "command_parse",
            payload=url,
        )

        await message.reply(f"üîÑ –ü–∞—Ä—Å–∏–º {url}...")

        try:
            async with UniversalParser() as parser:
                results = await parser.parse_url(url)

            if results:
                save_results("manual_parse", results)
                log_profile_action(
                    service,
                    profile,
                    "command_parse_success",
                    payload=url,
                )

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                preview = results[:5]
                text = f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(results)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤\n\n"
                text += json.dumps(preview, ensure_ascii=False, indent=2)

                if len(text) > 4000:
                    text = text[:3900] + "..."

                await message.reply(f"``````", parse_mode="Markdown")
            else:
                log_profile_action(
                    service,
                    profile,
                    "command_parse_empty",
                    payload=url,
                )
                await message.reply("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

        except Exception as e:
            log_profile_action(
                service,
                profile,
                "command_parse_error",
                payload=str(e),
            )
            await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

@dp.message(Command("run"))
async def cmd_run(message: types.Message):
    with profile_scope(message) as (profile, service):
        if not is_admin(message.from_user.id):
            log_profile_action(
                service,
                profile,
                "access_denied",
                payload=get_message_payload(message),
            )
            return

        args = (message.text or "").split(" ", 1)
        if len(args) < 2 or not args[1].strip():
            await message.reply("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /run <profile_name>")
            return

        profile_name = args[1].strip()
        log_profile_action(
            service,
            profile,
            "command_run",
            payload=profile_name,
        )

        if profile_name not in parsing_profiles:
            await message.reply(f"‚ùå –ü—Ä–æ—Ñ–∏–ª—å '{profile_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        await message.reply(f"üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å '{profile_name}'...")

        try:
            async with UniversalParser() as parser:
                results = await parser.parse_by_profile(profile_name)

            if results:
                save_results(profile_name, results)
                log_profile_action(
                    service,
                    profile,
                    "command_run_success",
                    payload=profile_name,
                )

                text = f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å '{profile_name}' –≤—ã–ø–æ–ª–Ω–µ–Ω\n"
                text += f"–ù–∞–π–¥–µ–Ω–æ: {len(results)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤\n\n"

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
                for i, result in enumerate(results[:3]):
                    text += f"{i+1}. {json.dumps(result, ensure_ascii=False)}\n"

                if len(results) > 3:
                    text += f"... –∏ –µ—â—ë {len(results)-3} —ç–ª–µ–º–µ–Ω—Ç–æ–≤"

                await message.reply(text)
            else:
                log_profile_action(
                    service,
                    profile,
                    "command_run_empty",
                    payload=profile_name,
                )
                await message.reply("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

        except Exception as e:
            log_profile_action(
                service,
                profile,
                "command_run_error",
                payload=str(e),
            )
            await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

@dp.message(Command("results"))
async def cmd_results(message: types.Message):
    with profile_scope(message) as (profile, service):
        if not is_admin(message.from_user.id):
            log_profile_action(
                service,
                profile,
                "access_denied",
                payload=get_message_payload(message),
            )
            return

        log_profile_action(
            service,
            profile,
            "command_results",
            payload=get_message_payload(message),
        )

        results = get_recent_results(limit=100)

        if not results:
            await message.reply("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return

        text = f"üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:\n\n"

        for result in results[:10]:
            text += (
                f"üî∏ {result['timestamp']} - {result['profile_name']}: {result['count']} —ç–ª–µ–º–µ–Ω—Ç–æ–≤\n"
            )

        await message.reply(text)

@dp.message(Command("export"))
async def cmd_export(message: types.Message):
    with profile_scope(message) as (profile, service):
        if not is_admin(message.from_user.id):
            log_profile_action(
                service,
                profile,
                "access_denied",
                payload=get_message_payload(message),
            )
            return

        log_profile_action(
            service,
            profile,
            "command_export",
            payload=get_message_payload(message),
        )

        results = get_recent_results(limit=1000)

        if not results:
            await message.reply("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            return

        # –°–æ–∑–¥–∞—ë–º Excel —Ñ–∞–π–ª
        df = pd.DataFrame(results)

        buffer = io.BytesIO()
        with pd.ExcelWriter(buffer, engine='openpyxl') as writer:
            df.to_excel(writer, index=False, sheet_name='Results')

        buffer.seek(0)

        file = BufferedInputFile(buffer.read(), filename="parsing_results.xlsx")
        await message.reply_document(file, caption=f"üìà –≠–∫—Å–ø–æ—Ä—Ç: {len(results)} –∑–∞–ø–∏—Å–µ–π")

async def start_bot():
    print("ü§ñ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(start_bot())
