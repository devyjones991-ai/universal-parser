import asyncio
import json
import io
import pandas as pd
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import BufferedInputFile, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from config import settings, parsing_profiles
from parser import UniversalParser
from db import (
    save_results, get_recent_results, get_or_create_user, get_user_by_telegram_id,
    add_tracked_item, get_user_tracked_items, remove_tracked_item, create_alert,
    get_user_alerts, deactivate_alert, get_user_stats, get_price_history
)
from alert_system import monitoring_service, AlertNotificationService
from analytics import analytics_service
from subscription import subscription_service, payment_service

bot = Bot(token=settings.TELEGRAM_BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
alert_notification_service = AlertNotificationService(bot)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class AddItemStates(StatesGroup):
    waiting_for_url = State()
    waiting_for_name = State()
    waiting_for_marketplace = State()

class AddAlertStates(StatesGroup):
    waiting_for_alert_type = State()
    waiting_for_conditions = State()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
def is_admin(user_id: int) -> bool:
    return user_id == settings.TELEGRAM_CHAT_ID or user_id in settings.ADMIN_CHAT_IDS

def get_user_or_create(message: types.Message):
    """–ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return get_or_create_user(
        telegram_id=message.from_user.id,
        username=message.from_user.username,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name
    )

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = get_user_or_create(message)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton(text="üì¶ –ú–æ–∏ —Ç–æ–≤–∞—Ä—ã")],
            [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä"), KeyboardButton(text="üîî –ú–æ–∏ –∞–ª–µ—Ä—Ç—ã")],
            [KeyboardButton(text="üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞"), KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")],
            [KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å"), KeyboardButton(text="üí≥ –ü–æ–¥–ø–∏—Å–∫–∞")]
        ],
        resize_keyboard=True
    )
    
    welcome_text = f"""
üéØ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Universal Parser!</b>

üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name or '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}!

üöÄ <b>–ß—Ç–æ —è —É–º–µ—é:</b>
‚Ä¢ üì¶ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞—Ö
‚Ä¢ üîî –£–≤–µ–¥–æ–º–ª—è—Ç—å –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö —Ü–µ–Ω –∏ –æ—Å—Ç–∞—Ç–∫–æ–≤
‚Ä¢ üìà –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∏–Ω–∞–º–∏–∫—É —Ü–µ–Ω
‚Ä¢ üìä –°–æ–∑–¥–∞–≤–∞—Ç—å –æ—Ç—á–µ—Ç—ã –∏ –≥—Ä–∞—Ñ–∏–∫–∏

üí° <b>–ù–∞—á–Ω–∏—Ç–µ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è!</b>

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã:
/monitor - –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä
/alerts - –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–ª–µ—Ä—Ç—ã
/stats - –≤–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    """
    
    await message.reply(welcome_text, reply_markup=keyboard, parse_mode="HTML")

@dp.message(Command("profiles"))
async def cmd_profiles(message: types.Message):
    if not is_admin(message.from_user.id):
        return
    
    if not parsing_profiles:
        await message.reply("‚ùå –ü—Ä–æ—Ñ–∏–ª–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        return
    
    text = "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏:\n\n"
    for key, profile in parsing_profiles.items():
        text += f"üî∏ `{key}` - {profile['name']}\n"
    
    await message.reply(text, parse_mode="Markdown")

@dp.message(Command("parse"))
async def cmd_parse(message: types.Message):
    if not is_admin(message.from_user.id):
        return
    
    args = message.text.split(" ", 1)
    if len(args) < 2:
        await message.reply("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /parse <url>")
        return
    
    url = args[1]
    await message.reply(f"üîÑ –ü–∞—Ä—Å–∏–º {url}...")
    
    try:
        async with UniversalParser() as parser:
            results = await parser.parse_url(url)
        
        if results:
            save_results("manual_parse", results)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            preview = results[:5]
            text = f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(results)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤\n\n"
            text += json.dumps(preview, ensure_ascii=False, indent=2)
            
            if len(text) > 4000:
                text = text[:3900] + "..."
            
            await message.reply(f"```json\n{text}\n```", parse_mode="Markdown")
        else:
            await message.reply("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

@dp.message(Command("run"))
async def cmd_run(message: types.Message):
    if not is_admin(message.from_user.id):
        return
    
    args = message.text.split(" ", 1)
    if len(args) < 2:
        await message.reply("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /run <profile_name>")
        return
    
    profile_name = args[1]
    
    if profile_name not in parsing_profiles:
        await message.reply(f"‚ùå –ü—Ä–æ—Ñ–∏–ª—å '{profile_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    await message.reply(f"üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å '{profile_name}'...")
    
    try:
        async with UniversalParser() as parser:
            results = await parser.parse_by_profile(profile_name)
        
        if results:
            save_results(profile_name, results)
            
            text = f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å '{profile_name}' –≤—ã–ø–æ–ª–Ω–µ–Ω\n"
            text += f"–ù–∞–π–¥–µ–Ω–æ: {len(results)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤\n\n"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
            for i, result in enumerate(results[:3]):
                text += f"{i+1}. {json.dumps(result, ensure_ascii=False)}\n"
            
            if len(results) > 3:
                text += f"... –∏ –µ—â—ë {len(results)-3} —ç–ª–µ–º–µ–Ω—Ç–æ–≤"
            
            await message.reply(text)
        else:
            await message.reply("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

@dp.message(Command("results"))
async def cmd_results(message: types.Message):
    if not is_admin(message.from_user.id):
        return
    
    results = get_recent_results(limit=100)
    
    if not results:
        await message.reply("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    text = f"üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:\n\n"
    
    for result in results[:10]:
        text += f"üî∏ {result['timestamp']} - {result['profile_name']}: {result['count']} —ç–ª–µ–º–µ–Ω—Ç–æ–≤\n"
    
    await message.reply(text)

@dp.message(Command("export"))
async def cmd_export(message: types.Message):
    if not is_admin(message.from_user.id):
        return
    
    results = get_recent_results(limit=1000)
    
    if not results:
        await message.reply("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
        return
    
    # –°–æ–∑–¥–∞—ë–º Excel —Ñ–∞–π–ª
    df = pd.DataFrame(results)
    
    buffer = io.BytesIO()
    with pd.ExcelWriter(buffer, engine='openpyxl') as writer:
        df.to_excel(writer, index=False, sheet_name='Results')
    
    buffer.seek(0)
    
    file = BufferedInputFile(buffer.read(), filename="parsing_results.xlsx")
    await message.reply_document(file, caption=f"üìà –≠–∫—Å–ø–æ—Ä—Ç: {len(results)} –∑–∞–ø–∏—Å–µ–π")

# –ù–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@dp.message(Command("monitor"))
async def cmd_monitor(message: types.Message, state: FSMContext):
    """–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"""
    user = get_user_or_create(message)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏
    stats = get_user_stats(user.id)
    if stats["subscription_tier"] == "free" and stats["tracked_items_count"] >= 3:
        await message.reply(
            "‚ùå <b>–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏!</b>\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ 3 —Ç–æ–≤–∞—Ä–∞.\n"
            "–î–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ –æ—Ñ–æ—Ä–º–∏—Ç–µ Premium –ø–æ–¥–ø–∏—Å–∫—É: /subscription",
            parse_mode="HTML"
        )
        return
    
    await state.set_state(AddItemStates.waiting_for_url)
    await message.reply(
        "üì¶ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä –∏–ª–∏ –µ–≥–æ –∞—Ä—Ç–∏–∫—É–ª:",
        parse_mode="HTML"
    )

@dp.message(AddItemStates.waiting_for_url)
async def process_item_url(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ URL —Ç–æ–≤–∞—Ä–∞"""
    url = message.text.strip()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å –ø–æ URL
    marketplace = None
    if "wildberries.ru" in url or "wb.ru" in url:
        marketplace = "wb"
    elif "ozon.ru" in url:
        marketplace = "ozon"
    elif "market.yandex.ru" in url:
        marketplace = "yandex"
    else:
        await message.reply(
            "‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å!\n\n"
            "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: Wildberries, Ozon, –Ø–Ω–¥–µ–∫—Å.–ú–∞—Ä–∫–µ—Ç"
        )
        return
    
    await state.update_data(url=url, marketplace=marketplace)
    await state.set_state(AddItemStates.waiting_for_name)
    
    await message.reply(
        f"‚úÖ –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å: {marketplace.upper()}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:"
    )

@dp.message(AddItemStates.waiting_for_name)
async def process_item_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    name = message.text.strip()
    data = await state.get_data()
    
    user = get_user_by_telegram_id(message.from_user.id)
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ç–æ–≤–∞—Ä–∞ –∏–∑ URL
    item_id = extract_item_id(data["url"], data["marketplace"])
    
    try:
        tracked_item = add_tracked_item(
            user_id=user.id,
            item_id=item_id,
            marketplace=data["marketplace"],
            name=name,
            url=data["url"]
        )
        
        await state.clear()
        
        await message.reply(
            f"‚úÖ <b>–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è!</b>\n\n"
            f"üì¶ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {name}\n"
            f"üè™ <b>–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å:</b> {data['marketplace'].upper()}\n"
            f"üîó <b>–°—Å—ã–ª–∫–∞:</b> {data['url']}\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö —Ü–µ–Ω—ã –∏ –æ—Å—Ç–∞—Ç–∫–æ–≤!",
            parse_mode="HTML"
        )
        
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: {str(e)}")
        await state.clear()

def extract_item_id(url: str, marketplace: str) -> str:
    """–ò–∑–≤–ª–µ—á—å ID —Ç–æ–≤–∞—Ä–∞ –∏–∑ URL"""
    if marketplace == "wb":
        # –î–ª—è Wildberries –∏–∑–≤–ª–µ–∫–∞–µ–º ID –∏–∑ URL
        import re
        match = re.search(r'/(\d+)/', url)
        return match.group(1) if match else url
    elif marketplace == "ozon":
        # –î–ª—è Ozon
        import re
        match = re.search(r'product/(\d+)', url)
        return match.group(1) if match else url
    else:
        return url

@dp.message(Command("myitems"))
async def cmd_my_items(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Ç–æ–≤–∞—Ä—ã"""
    user = get_user_by_telegram_id(message.from_user.id)
    if not user:
        await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    items = get_user_tracked_items(user.id)
    
    if not items:
        await message.reply(
            "üì¶ <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤</b>\n\n"
            "–î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä –∫–æ–º–∞–Ω–¥–æ–π /monitor",
            parse_mode="HTML"
        )
        return
    
    text = f"üì¶ <b>–í–∞—à–∏ —Ç–æ–≤–∞—Ä—ã ({len(items)}):</b>\n\n"
    
    for i, item in enumerate(items, 1):
        price_text = f"üí∞ {item.current_price} ‚ÇΩ" if item.current_price else "üí∞ –¶–µ–Ω–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞"
        stock_text = f"üì¶ {item.current_stock} —à—Ç" if item.current_stock is not None else "üì¶ –û—Å—Ç–∞—Ç–æ–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
        
        text += f"{i}. <b>{item.name}</b>\n"
        text += f"   {price_text} | {stock_text}\n"
        text += f"   üè™ {item.marketplace.upper()} | üîó {item.url}\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="remove_item")],
        [InlineKeyboardButton(text="üîî –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–ª–µ—Ä—Ç—ã", callback_data="setup_alerts")]
    ])
    
    await message.reply(text, reply_markup=keyboard, parse_mode="HTML")

@dp.message(Command("alerts"))
async def cmd_alerts(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–ª–µ—Ä—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = get_user_by_telegram_id(message.from_user.id)
    if not user:
        await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    alerts = get_user_alerts(user.id)
    
    if not alerts:
        await message.reply(
            "üîî <b>–£ –≤–∞—Å –Ω–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤</b>\n\n"
            "–°–æ–∑–¥–∞–π—Ç–µ –∞–ª–µ—Ä—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω –∏ –æ—Å—Ç–∞—Ç–∫–æ–≤!",
            parse_mode="HTML"
        )
        return
    
    text = f"üîî <b>–í–∞—à–∏ –∞–ª–µ—Ä—Ç—ã ({len(alerts)}):</b>\n\n"
    
    for i, alert in enumerate(alerts, 1):
        alert_type_names = {
            "price_drop": "üìâ –ü–∞–¥–µ–Ω–∏–µ —Ü–µ–Ω—ã",
            "price_rise": "üìà –†–æ—Å—Ç —Ü–µ–Ω—ã", 
            "stock_change": "üì¶ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤",
            "review_change": "‚≠ê –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞"
        }
        
        text += f"{i}. {alert_type_names.get(alert.alert_type, alert.alert_type)}\n"
        text += f"   –£—Å–ª–æ–≤–∏—è: {json.dumps(alert.conditions, ensure_ascii=False)}\n"
        text += f"   –°—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π: {alert.trigger_count}\n\n"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –∞–ª–µ—Ä—Ç", callback_data="create_alert")],
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –∞–ª–µ—Ä—Ç", callback_data="remove_alert")]
    ])
    
    await message.reply(text, reply_markup=keyboard, parse_mode="HTML")

@dp.message(Command("stats"))
async def cmd_stats(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = get_user_by_telegram_id(message.from_user.id)
    if not user:
        await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    stats = get_user_stats(user.id)
    
    text = f"""
üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>

üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å:</b>
‚Ä¢ –ò–º—è: {user.first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
‚Ä¢ –ü–æ–¥–ø–∏—Å–∫–∞: {stats['subscription_tier'].upper()}
‚Ä¢ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {stats['created_at']}
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {stats['last_activity']}

üì¶ <b>–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ:</b>
‚Ä¢ –¢–æ–≤–∞—Ä–æ–≤: {stats['tracked_items_count']}
‚Ä¢ –ê–ª–µ—Ä—Ç–æ–≤: {stats['alerts_count']}

üí° <b>–°–æ–≤–µ—Ç—ã:</b>
‚Ä¢ –î–æ–±–∞–≤–ª—è–π—Ç–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ü–µ–Ω
‚Ä¢ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ –∞–ª–µ—Ä—Ç—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–Ω–∞–ª–∏—Ç–∏–∫—É –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π
    """
    
    await message.reply(text, parse_mode="HTML")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
@dp.message(F.text == "üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def handle_stats_button(message: types.Message):
    await cmd_stats(message)

@dp.message(F.text == "üì¶ –ú–æ–∏ —Ç–æ–≤–∞—Ä—ã")
async def handle_items_button(message: types.Message):
    await cmd_my_items(message)

@dp.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä")
async def handle_add_item_button(message: types.Message, state: FSMContext):
    await cmd_monitor(message, state)

@dp.message(F.text == "üîî –ú–æ–∏ –∞–ª–µ—Ä—Ç—ã")
async def handle_alerts_button(message: types.Message):
    await cmd_alerts(message)

@dp.message(F.text == "‚ùì –ü–æ–º–æ—â—å")
async def handle_help_button(message: types.Message):
    help_text = """
‚ùì <b>–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞</b>

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/monitor - –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
/myitems - –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—à–∏ —Ç–æ–≤–∞—Ä—ã
/alerts - –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–ª–µ—Ä—Ç—ã
/stats - –≤–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

<b>–ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä:</b>
1. –ù–∞–∂–º–∏—Ç–µ "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä" –∏–ª–∏ /monitor
2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä
3. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
4. –ì–æ—Ç–æ–≤–æ! –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è

<b>–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–ª–µ—Ä—Ç—ã:</b>
1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ "üîî –ú–æ–∏ –∞–ª–µ—Ä—Ç—ã"
2. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–ª–µ—Ä—Ç–∞
3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —É—Å–ª–æ–≤–∏—è
4. –ü–æ–ª—É—á–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!

<b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ã:</b>
‚Ä¢ Wildberries
‚Ä¢ Ozon  
‚Ä¢ –Ø–Ω–¥–µ–∫—Å.–ú–∞—Ä–∫–µ—Ç

<b>–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?</b>
–ù–∞–ø–∏—à–∏—Ç–µ @support_username
    """
    await message.reply(help_text, parse_mode="HTML")

# –ö–æ–º–∞–Ω–¥—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
@dp.message(Command("analytics"))
async def cmd_analytics(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = get_user_by_telegram_id(message.from_user.id)
    if not user:
        await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    report = analytics_service.generate_analytics_report(user.id, days=30)
    
    if not report:
        await message.reply(
            "üìà <b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞</b>\n\n"
            "–î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É!",
            parse_mode="HTML"
        )
        return
    
    text = f"""
üìà <b>–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç –∑–∞ {report['period_days']} –¥–Ω–µ–π</b>

üìä <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: {report['total_items']}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤: {report['active_trends']}

üìà <b>–¢—Ä–µ–Ω–¥—ã:</b>
‚Ä¢ –†–∞—Å—Ç—É—â–∏–µ: {report['trends_summary']['up']} —Ç–æ–≤–∞—Ä–æ–≤
‚Ä¢ –ü–∞–¥–∞—é—â–∏–µ: {report['trends_summary']['down']} —Ç–æ–≤–∞—Ä–æ–≤  
‚Ä¢ –°—Ç–∞–±–∏–ª—å–Ω—ã–µ: {report['trends_summary']['stable']} —Ç–æ–≤–∞—Ä–æ–≤

üî• <b>–¢–æ–ø –∏–∑–º–µ–Ω–µ–Ω–∏–π:</b>
"""
    
    for i, change in enumerate(report['top_changes'][:3], 1):
        trend_emoji = "üìà" if change['price_change_percent'] > 0 else "üìâ"
        text += f"{i}. {trend_emoji} {change['price_change_percent']:+.1f}% - {change['item_id']}\n"
    
    if report['recommendations']:
        text += "\nüí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n"
        for rec in report['recommendations'][:3]:
            text += f"‚Ä¢ {rec}\n"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="detailed_analytics")],
        [InlineKeyboardButton(text="üìà –ì—Ä–∞—Ñ–∏–∫–∏ —Ü–µ–Ω", callback_data="price_charts")],
        [InlineKeyboardButton(text="üìÑ –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel", callback_data="export_excel")]
    ])
    
    await message.reply(text, reply_markup=keyboard, parse_mode="HTML")

@dp.message(Command("export"))
async def cmd_export(message: types.Message):
    """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ Excel"""
    user = get_user_by_telegram_id(message.from_user.id)
    if not user:
        await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    await message.reply("üìÑ <b>–ì–µ–Ω–µ—Ä–∏—Ä—É—é Excel –æ—Ç—á–µ—Ç...</b>", parse_mode="HTML")
    
    try:
        excel_data = analytics_service.export_to_excel(user.id, days=30)
        
        if not excel_data:
            await message.reply("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            return
        
        file = BufferedInputFile(excel_data, filename=f"analytics_report_{user.id}.xlsx")
        await message.reply_document(
            file, 
            caption="üìä <b>–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç</b>\n\n–°–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ –æ —Ü–µ–Ω–∞—Ö, —Ç—Ä–µ–Ω–¥–∞—Ö –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è—Ö",
            parse_mode="HTML"
        )
        
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {str(e)}")

@dp.message(F.text == "üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞")
async def handle_analytics_button(message: types.Message):
    await cmd_analytics(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∫–Ω–æ–ø–æ–∫
@dp.callback_query(F.data == "detailed_analytics")
async def handle_detailed_analytics(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É"""
    user = get_user_by_telegram_id(callback.from_user.id)
    if not user:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    trends = analytics_service.get_price_trends(user.id, days=30)
    
    if not trends:
        await callback.answer("üìà –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏")
        return
    
    text = "üìä <b>–ü–æ–¥—Ä–æ–±–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ —Ç–æ–≤–∞—Ä–∞–º:</b>\n\n"
    
    for name, trend in trends.items():
        trend_emoji = "üìà" if trend['trend'] == 'up' else "üìâ" if trend['trend'] == 'down' else "‚û°Ô∏è"
        text += f"{trend_emoji} <b>{name}</b>\n"
        text += f"   –¶–µ–Ω–∞: {trend['current_price']:.0f} ‚ÇΩ\n"
        text += f"   –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {trend['price_change_percent']:+.1f}%\n"
        text += f"   –î–∏–∞–ø–∞–∑–æ–Ω: {trend['min_price']:.0f} - {trend['max_price']:.0f} ‚ÇΩ\n\n"
    
    await callback.message.edit_text(text, parse_mode="HTML")
    await callback.answer()

@dp.callback_query(F.data == "price_charts")
async def handle_price_charts(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏ —Ü–µ–Ω"""
    user = get_user_by_telegram_id(callback.from_user.id)
    if not user:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    tracked_items = get_user_tracked_items(user.id)
    
    if not tracked_items:
        await callback.answer("üì¶ –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤")
        return
    
    # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    chart_data = analytics_service.create_price_chart(user.id, tracked_items[0].id, days=30)
    
    if chart_data:
        file = BufferedInputFile(chart_data, filename="price_chart.png")
        await callback.message.reply_photo(
            file,
            caption=f"üìà <b>–ì—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω—ã: {tracked_items[0].name}</b>\n\n–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π",
            parse_mode="HTML"
        )
    else:
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫")
    
    await callback.answer()

@dp.callback_query(F.data == "export_excel")
async def handle_export_excel(callback: types.CallbackQuery):
    """–≠–∫—Å–ø–æ—Ä—Ç –≤ Excel"""
    user = get_user_by_telegram_id(callback.from_user.id)
    if not user:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    await callback.answer("üìÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é Excel —Ñ–∞–π–ª...")
    
    try:
        excel_data = analytics_service.export_to_excel(user.id, days=30)
        
        if excel_data:
            file = BufferedInputFile(excel_data, filename=f"analytics_{user.id}.xlsx")
            await callback.message.reply_document(
                file,
                caption="üìä <b>–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç –≤ Excel</b>",
                parse_mode="HTML"
            )
        else:
            await callback.answer("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

# –ö–æ–º–∞–Ω–¥—ã –ø–æ–¥–ø–∏—Å–∫–∏
@dp.message(Command("subscription"))
async def cmd_subscription(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ"""
    user = get_user_by_telegram_id(message.from_user.id)
    if not user:
        await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    subscription_info = subscription_service.get_subscription_info(user.id)
    
    text = f"""
üí≥ <b>–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞</b>

üìã <b>–¢–µ–∫—É—â–∏–π —Ç–∞—Ä–∏—Ñ:</b> {subscription_info['plan_name']}
üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {subscription_info['price']} ‚ÇΩ/–º–µ—Å—è—Ü
üìÖ <b>–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:</b> {subscription_info['expires'] or '–ë–µ—Å—Å—Ä–æ—á–Ω–æ'}

üìä <b>–í–∞—à–∏ –ª–∏–º–∏—Ç—ã:</b>
‚Ä¢ –¢–æ–≤–∞—Ä–æ–≤: {subscription_info['limits']['tracked_items']} {'(–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π)' if subscription_info['limits']['tracked_items'] == -1 else ''}
‚Ä¢ –ê–ª–µ—Ä—Ç–æ–≤: {subscription_info['limits']['alerts']} {'(–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π)' if subscription_info['limits']['alerts'] == -1 else ''}
‚Ä¢ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞: {subscription_info['limits']['analytics_days']} –¥–Ω–µ–π

‚ú® <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>
"""
    
    for feature in subscription_info['features']:
        text += f"‚Ä¢ {feature}\n"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –°–º–µ–Ω–∏—Ç—å —Ç–∞—Ä–∏—Ñ", callback_data="change_plan")],
        [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", callback_data="make_payment")],
        [InlineKeyboardButton(text="üìä –°—Ä–∞–≤–Ω–∏—Ç—å —Ç–∞—Ä–∏—Ñ—ã", callback_data="compare_plans")]
    ])
    
    await message.reply(text, reply_markup=keyboard, parse_mode="HTML")

@dp.message(Command("plans"))
async def cmd_plans(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã"""
    plans = subscription_service.get_available_plans()
    
    text = "üí≥ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã</b>\n\n"
    
    for tier, plan in plans.items():
        text += f"üî∏ <b>{plan['name']}</b>\n"
        text += f"üí∞ {plan['price']} ‚ÇΩ/–º–µ—Å—è—Ü\n"
        text += f"üì¶ –¢–æ–≤–∞—Ä–æ–≤: {plan['tracked_items_limit']} {'(–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π)' if plan['tracked_items_limit'] == -1 else ''}\n"
        text += f"üîî –ê–ª–µ—Ä—Ç–æ–≤: {plan['alerts_limit']} {'(–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π)' if plan['alerts_limit'] == -1 else ''}\n"
        text += f"üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞: {plan['analytics_days']} –¥–Ω–µ–π\n\n"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π", callback_data="select_plan_free")],
        [InlineKeyboardButton(text="‚≠ê Premium", callback_data="select_plan_premium")],
        [InlineKeyboardButton(text="üè¢ Enterprise", callback_data="select_plan_enterprise")]
    ])
    
    await message.reply(text, reply_markup=keyboard, parse_mode="HTML")

@dp.message(F.text == "üí≥ –ü–æ–¥–ø–∏—Å–∫–∞")
async def handle_subscription_button(message: types.Message):
    await cmd_subscription(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∫–Ω–æ–ø–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏
@dp.callback_query(F.data == "change_plan")
async def handle_change_plan(callback: types.CallbackQuery):
    """–°–º–µ–Ω–∏—Ç—å —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω"""
    await callback.answer("üîÑ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ç–∞—Ä–∏—Ñ–∞...")
    await cmd_plans(callback.message)

@dp.callback_query(F.data == "make_payment")
async def handle_make_payment(callback: types.CallbackQuery):
    """–û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"""
    user = get_user_by_telegram_id(callback.from_user.id)
    if not user:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    subscription_info = subscription_service.get_subscription_info(user.id)
    
    if subscription_info['current_tier'] == 'free':
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º Premium
        amount = 990
        description = "Premium –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 1 –º–µ—Å—è—Ü"
    else:
        # –ü—Ä–æ–¥–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –ø–æ–¥–ø–∏—Å–∫–∏
        amount = subscription_info['price']
        description = f"–ü—Ä–æ–¥–ª–µ–Ω–∏–µ {subscription_info['plan_name']} –Ω–∞ 1 –º–µ—Å—è—Ü"
    
    try:
        payment_link = await payment_service.create_payment_link(
            user.id, amount, description
        )
        
        if payment_link:
            await callback.message.reply(
                f"üí≥ <b>–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n"
                f"üí∞ –°—É–º–º–∞: {amount} ‚ÇΩ\n"
                f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n\n"
                f"üîó <a href='{payment_link}'>–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ</a>\n\n"
                f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.",
                parse_mode="HTML"
            )
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã")
    
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

@dp.callback_query(F.data == "compare_plans")
async def handle_compare_plans(callback: types.CallbackQuery):
    """–°—Ä–∞–≤–Ω–∏—Ç—å —Ç–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã"""
    plans = subscription_service.get_available_plans()
    
    text = "üìä <b>–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤</b>\n\n"
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    features = [
        "–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤",
        "–ê–ª–µ—Ä—Ç—ã",
        "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞",
        "–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö",
        "–ì—Ä–∞—Ñ–∏–∫–∏",
        "–ü–æ–¥–¥–µ—Ä–∂–∫–∞"
    ]
    
    text += "| –§—É–Ω–∫—Ü–∏—è | –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π | Premium | Enterprise |\n"
    text += "|---------|------------|---------|------------|\n"
    text += "| –¢–æ–≤–∞—Ä—ã | 3 | 50 | ‚àû |\n"
    text += "| –ê–ª–µ—Ä—Ç—ã | 5 | 100 | ‚àû |\n"
    text += "| –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ | 7 –¥–Ω–µ–π | 90 –¥–Ω–µ–π | 365 –¥–Ω–µ–π |\n"
    text += "| –≠–∫—Å–ø–æ—Ä—Ç | ‚ùå | ‚úÖ | ‚úÖ |\n"
    text += "| –ì—Ä–∞—Ñ–∏–∫–∏ | ‚ùå | ‚úÖ | ‚úÖ |\n"
    text += "| –ü–æ–¥–¥–µ—Ä–∂–∫–∞ | –ë–∞–∑–æ–≤–∞—è | –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç | –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è |\n"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üÜì –í—ã–±—Ä–∞—Ç—å –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π", callback_data="select_plan_free")],
        [InlineKeyboardButton(text="‚≠ê –í—ã–±—Ä–∞—Ç—å Premium", callback_data="select_plan_premium")],
        [InlineKeyboardButton(text="üè¢ –í—ã–±—Ä–∞—Ç—å Enterprise", callback_data="select_plan_enterprise")]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()

@dp.callback_query(F.data.startswith("select_plan_"))
async def handle_select_plan(callback: types.CallbackQuery):
    """–í—ã–±—Ä–∞—Ç—å —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω"""
    plan_tier = callback.data.replace("select_plan_", "")
    
    if plan_tier == "free":
        await callback.answer("‚úÖ –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ")
        return
    
    user = get_user_by_telegram_id(callback.from_user.id)
    if not user:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞–Ω–µ
    plan_info = subscription_service.get_subscription_benefits(plan_tier)
    
    text = f"""
üéØ <b>–í—ã–±—Ä–∞–Ω —Ç–∞—Ä–∏—Ñ: {plan_info['name']}</b>

üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {plan_info['price']} ‚ÇΩ/–º–µ—Å—è—Ü

‚ú® <b>–ß—Ç–æ –≤–∫–ª—é—á–µ–Ω–æ:</b>
"""
    
    for feature in plan_info['features']:
        text += f"‚Ä¢ {feature}\n"
    
    text += f"\nüìä <b>–õ–∏–º–∏—Ç—ã:</b>\n"
    text += f"‚Ä¢ –¢–æ–≤–∞—Ä–æ–≤: {plan_info['limits']['tracked_items']} {'(–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π)' if plan_info['limits']['tracked_items'] == -1 else ''}\n"
    text += f"‚Ä¢ –ê–ª–µ—Ä—Ç–æ–≤: {plan_info['limits']['alerts']} {'(–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π)' if plan_info['limits']['alerts'] == -1 else ''}\n"
    text += f"‚Ä¢ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞: {plan_info['limits']['analytics_days']} –¥–Ω–µ–π\n"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å —Å–µ–π—á–∞—Å", callback_data=f"pay_{plan_tier}")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Ç–∞—Ä–∏—Ñ–∞–º", callback_data="compare_plans")]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()

@dp.callback_query(F.data.startswith("pay_"))
async def handle_pay_plan(callback: types.CallbackQuery):
    """–û–ø–ª–∞—Ç–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–ª–∞–Ω"""
    plan_tier = callback.data.replace("pay_", "")
    
    user = get_user_by_telegram_id(callback.from_user.id)
    if not user:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    plan_info = subscription_service.get_subscription_benefits(plan_tier)
    
    try:
        payment_link = await payment_service.create_payment_link(
            user.id, 
            plan_info['price'], 
            f"{plan_info['name']} –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 1 –º–µ—Å—è—Ü"
        )
        
        if payment_link:
            await callback.message.reply(
                f"üí≥ <b>–û–ø–ª–∞—Ç–∞ —Ç–∞—Ä–∏—Ñ–∞ {plan_info['name']}</b>\n\n"
                f"üí∞ –°—É–º–º–∞: {plan_info['price']} ‚ÇΩ\n"
                f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {plan_info['name']} –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 1 –º–µ—Å—è—Ü\n\n"
                f"üîó <a href='{payment_link}'>–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ</a>\n\n"
                f"–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –≤–∞—à —Ç–∞—Ä–∏—Ñ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.",
                parse_mode="HTML"
            )
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã")
    
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

async def start_bot():
    print("ü§ñ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(start_bot())
