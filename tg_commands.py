import asyncio
import io
import json
from typing import Dict, Tuple

import pandas as pd
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import BufferedInputFile
from config import settings, parsing_profiles
from parser import UniversalParser
from db import get_recent_results, save_results

from analytics.ai_advisor import advisor as ai_advisor
from analytics.service import (
    build_analytics_report,
    export_report,
    format_report_text,
    generate_price_chart,
)

bot = Bot(token=settings.TELEGRAM_BOT_TOKEN)
dp = Dispatcher()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
def is_admin(user_id: int) -> bool:
    return user_id == settings.TELEGRAM_CHAT_ID or user_id in settings.ADMIN_CHAT_IDS

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.reply("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        return
    
    await message.reply(
        "üöÄ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –∑–∞–ø—É—â–µ–Ω!\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/profiles - —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Ñ–∏–ª–µ–π\n"
        "/parse <url> - –ø–∞—Ä—Å–∏—Ç—å URL\n"
        "/run <profile> - –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å\n"
        "/results - –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã\n"
        "/export - —ç–∫—Å–ø–æ—Ä—Ç –≤ Excel/CSV"
    )

@dp.message(Command("profiles"))
async def cmd_profiles(message: types.Message):
    if not is_admin(message.from_user.id):
        return
    
    if not parsing_profiles:
        await message.reply("‚ùå –ü—Ä–æ—Ñ–∏–ª–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        return
    
    text = "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏:\n\n"
    for key, profile in parsing_profiles.items():
        text += f"üî∏ `{key}` - {profile['name']}\n"
    
    await message.reply(text, parse_mode="Markdown")

@dp.message(Command("parse"))
async def cmd_parse(message: types.Message):
    if not is_admin(message.from_user.id):
        return
    
    args = message.text.split(" ", 1)
    if len(args) < 2:
        await message.reply("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /parse <url>")
        return
    
    url = args[1]
    await message.reply(f"üîÑ –ü–∞—Ä—Å–∏–º {url}...")
    
    try:
        async with UniversalParser() as parser:
            results = await parser.parse_url(url)
        
        if results:
            save_results("manual_parse", results)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            preview = results[:5]
            text = f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(results)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤\n\n"
            text += json.dumps(preview, ensure_ascii=False, indent=2)
            
            if len(text) > 4000:
                text = text[:3900] + "..."
            
            await message.reply(f"``````", parse_mode="Markdown")
        else:
            await message.reply("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

@dp.message(Command("run"))
async def cmd_run(message: types.Message):
    if not is_admin(message.from_user.id):
        return
    
    args = message.text.split(" ", 1)
    if len(args) < 2:
        await message.reply("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /run <profile_name>")
        return
    
    profile_name = args[1]
    
    if profile_name not in parsing_profiles:
        await message.reply(f"‚ùå –ü—Ä–æ—Ñ–∏–ª—å '{profile_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    await message.reply(f"üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å '{profile_name}'...")
    
    try:
        async with UniversalParser() as parser:
            results = await parser.parse_by_profile(profile_name)
        
        if results:
            save_results(profile_name, results)
            
            text = f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å '{profile_name}' –≤—ã–ø–æ–ª–Ω–µ–Ω\n"
            text += f"–ù–∞–π–¥–µ–Ω–æ: {len(results)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤\n\n"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
            for i, result in enumerate(results[:3]):
                text += f"{i+1}. {json.dumps(result, ensure_ascii=False)}\n"
            
            if len(results) > 3:
                text += f"... –∏ –µ—â—ë {len(results)-3} —ç–ª–µ–º–µ–Ω—Ç–æ–≤"
            
            await message.reply(text)
        else:
            await message.reply("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

@dp.message(Command("results"))
async def cmd_results(message: types.Message):
    if not is_admin(message.from_user.id):
        return
    
    results = get_recent_results(limit=100)
    
    if not results:
        await message.reply("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    text = f"üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:\n\n"
    
    for result in results[:10]:
        text += f"üî∏ {result['timestamp']} - {result['profile_name']}: {result['count']} —ç–ª–µ–º–µ–Ω—Ç–æ–≤\n"
    
    await message.reply(text)

def _parse_command_args(text: str) -> Tuple[Dict[str, str], Tuple[str, ...]]:
    parts = text.split()
    params: Dict[str, str] = {}
    positional: Tuple[str, ...] = tuple()

    if len(parts) <= 1:
        return params, positional

    collected_positional = []
    for token in parts[1:]:
        if "=" in token:
            key, value = token.split("=", 1)
            params[key.lower()] = value
        else:
            collected_positional.append(token)

    return params, tuple(collected_positional)


@dp.message(Command("export"))
async def cmd_export(message: types.Message):
    if not is_admin(message.from_user.id):
        return

    params, positional = _parse_command_args(message.text or "")
    export_format = params.get("format") or (positional[0] if positional else settings.EXPORT_FORMAT)
    export_format = (export_format or "xlsx").lower()

    if export_format in {"csv", "json"}:
        profile = params.get("profile") or (positional[1] if len(positional) > 1 else None)
        item_id = params.get("item") or params.get("item_id")
        period = params.get("period")
        start = params.get("start")
        end = params.get("end")

        report = build_analytics_report(
            profile_name=profile,
            item_id=item_id,
            period=period,
            start_date=start,
            end_date=end,
        )

        try:
            buffer, filename, _ = export_report(report, export_format)
        except ValueError as exc:
            await message.reply(f"‚ùå {exc}")
            return

        file = BufferedInputFile(buffer.read(), filename=filename)
        await message.reply_document(
            file,
            caption="üìä –≠–∫—Å–ø–æ—Ä—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏",
        )
        return

    results = get_recent_results(limit=1000)

    if not results:
        await message.reply("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
        return

    df = pd.DataFrame(results)

    buffer = io.BytesIO()
    with pd.ExcelWriter(buffer, engine="openpyxl") as writer:
        df.to_excel(writer, index=False, sheet_name="Results")

    buffer.seek(0)

    file = BufferedInputFile(buffer.read(), filename="parsing_results.xlsx")
    await message.reply_document(file, caption=f"üìà –≠–∫—Å–ø–æ—Ä—Ç: {len(results)} –∑–∞–ø–∏—Å–µ–π")


@dp.message(Command("analytics"))
async def cmd_analytics(message: types.Message):
    if not is_admin(message.from_user.id):
        return

    params, positional = _parse_command_args(message.text or "")
    profile = params.get("profile") or (positional[0] if positional else None)
    if not profile:
        await message.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å: /analytics profile=<–∏–º—è> [item=<id>] [period=7d]")
        return

    item_id = params.get("item") or params.get("item_id") or (positional[1] if len(positional) > 1 else None)
    period = params.get("period") or (positional[2] if len(positional) > 2 else None)
    start = params.get("start")
    end = params.get("end")

    report = build_analytics_report(
        profile_name=profile,
        item_id=item_id,
        period=period,
        start_date=start,
        end_date=end,
    )

    text = format_report_text(report)
    await message.reply(text)

    chart_buffer = generate_price_chart(report)
    if chart_buffer:
        chart_file = BufferedInputFile(chart_buffer.read(), filename="analytics_chart.png")
        await message.reply_photo(chart_file, caption="–ì—Ä–∞—Ñ–∏–∫ –¥–∏–Ω–∞–º–∏–∫–∏ —Ü–µ–Ω—ã")

    advice = ai_advisor.advise(report)
    if advice:
        await message.reply(f"ü§ñ AI –ø–æ–¥—Å–∫–∞–∑–∫–∏:\n{advice}")

async def start_bot():
    print("ü§ñ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(start_bot())
