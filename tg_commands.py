import asyncio
import contextlib
import io
import json
import pandas as pd
from aiogram import Bot, Dispatcher, F, types
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import Command
from aiogram.types import (
    BufferedInputFile,
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from config import parsing_profiles, settings
from parser import UniversalParser
from db import SessionLocal, get_recent_results, save_results, init_db
from profiles.models import UserTip
from profiles.tip_service import (
    approve_tip,
    archive_tip,
    create_tip,
    get_top_tips,
    iter_subscribers,
    record_feedback,
    reject_tip,
)

bot = Bot(token=settings.TELEGRAM_BOT_TOKEN)
dp = Dispatcher()

SUBSCRIBERS: set[int] = set()

init_db()


def register_subscriber(chat_id: int) -> None:
    """–î–æ–±–∞–≤–ª—è–µ—Ç —á–∞—Ç –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –¥–∞–π–¥–∂–µ—Å—Ç–∞."""

    SUBSCRIBERS.add(chat_id)


def tip_rating_keyboard(tip_id: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üëç", callback_data=f"tip_like:{tip_id}:1"),
                InlineKeyboardButton(text="üëé", callback_data=f"tip_like:{tip_id}:-1"),
            ]
        ]
    )


def moderation_keyboard(tip_id: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"tip_moderate:approve:{tip_id}"),
                InlineKeyboardButton(text="üö´ –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"tip_moderate:reject:{tip_id}"),
            ]
        ]
    )


def format_tip_message(tip: UserTip) -> str:
    author = tip.author_username or "–ê–Ω–æ–Ω–∏–º"
    rating = tip.rating
    header = f"üí° –°–æ–≤–µ—Ç –æ—Ç {author}"
    rating_line = f"‚≠êÔ∏è –†–µ–π—Ç–∏–Ω–≥: {rating}"
    return f"{header}\n\n{tip.content}\n\n{rating_line}"


async def broadcast_tip(tip: UserTip, *, origin_chat_id: int | None = None) -> None:
    recipients = set(SUBSCRIBERS)
    recipients.update(iter_subscribers(settings.TELEGRAM_CHAT_ID, settings.ADMIN_CHAT_IDS))
    if origin_chat_id:
        recipients.add(origin_chat_id)

    text = format_tip_message(tip)
    for chat_id in recipients:
        try:
            await bot.send_message(chat_id, text, reply_markup=tip_rating_keyboard(tip.id))
        except Exception as exc:  # pragma: no cover - —Å–µ—Ç–µ–≤—ã–µ –æ—à–∏–±–∫–∏
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–≤–µ—Ç –≤ —á–∞—Ç {chat_id}: {exc}")


async def notify_admins_about_tip(tip: UserTip) -> None:
    text = (
        "üÜï –ù–æ–≤—ã–π —Å–æ–≤–µ—Ç –æ–∂–∏–¥–∞–µ—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏\n\n"
        f"–ê–≤—Ç–æ—Ä: {tip.author_username or tip.author_id}\n"
        f"ID —Å–æ–≤–µ—Ç–∞: {tip.id}\n\n"
        f"{tip.content}"
    )

    for admin_id in iter_subscribers(None, settings.ADMIN_CHAT_IDS):
        try:
            await bot.send_message(admin_id, text, reply_markup=moderation_keyboard(tip.id))
        except Exception as exc:  # pragma: no cover - —Å–µ—Ç–µ–≤—ã–µ –æ—à–∏–±–∫–∏
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {admin_id}: {exc}")


async def send_weekly_digest() -> bool:
    with SessionLocal() as session:
        tips = get_top_tips(session, period_days=7, limit=5)

    if not tips:
        return False

    lines = ["üß† –õ–∞–π—Ñ—Ö–∞–∫–∏ –Ω–µ–¥–µ–ª–∏", ""]
    for index, tip in enumerate(tips, start=1):
        lines.append(f"{index}. {tip.content} (—Ä–µ–π—Ç–∏–Ω–≥: {tip.rating})")

    digest_text = "\n".join(lines)
    recipients = set(SUBSCRIBERS)
    recipients.update(iter_subscribers(settings.TELEGRAM_CHAT_ID, settings.ADMIN_CHAT_IDS))

    for chat_id in recipients:
        try:
            await bot.send_message(chat_id, digest_text)
        except Exception as exc:  # pragma: no cover - —Å–µ—Ç–µ–≤—ã–µ –æ—à–∏–±–∫–∏
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç –≤ —á–∞—Ç {chat_id}: {exc}")

    return True


async def weekly_digest_worker() -> None:
    """–§–æ–Ω–æ–≤—ã–π —Ç–∞—Å–∫ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞."""

    while True:
        try:
            await asyncio.sleep(7 * 24 * 60 * 60)
            await send_weekly_digest()
        except asyncio.CancelledError:  # pragma: no cover - –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
            break
        except Exception as exc:  # pragma: no cover - –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞: {exc}")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
def is_admin(user_id: int) -> bool:
    return user_id == settings.TELEGRAM_CHAT_ID or user_id in settings.ADMIN_CHAT_IDS

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.reply("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        return

    register_subscriber(message.chat.id)

    await message.reply(
        "üöÄ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –∑–∞–ø—É—â–µ–Ω!\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/profiles - —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Ñ–∏–ª–µ–π\n"
        "/parse <url> - –ø–∞—Ä—Å–∏—Ç—å URL\n"
        "/run <profile> - –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å\n"
        "/results - –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã\n"
        "/export - —ç–∫—Å–ø–æ—Ä—Ç –≤ Excel/CSV\n"
        "/tip_send <—Ç–µ–∫—Å—Ç> - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–∞–π—Ñ—Ö–∞–∫\n"
        "/tip_best - –ª—É—á—à–∏–µ –ª–∞–π—Ñ—Ö–∞–∫–∏\n"
        "/tip_archive <id> [on|off] - –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–æ–≤–µ—Ç"
    )

@dp.message(Command("profiles"))
async def cmd_profiles(message: types.Message):
    if not is_admin(message.from_user.id):
        return
    
    if not parsing_profiles:
        await message.reply("‚ùå –ü—Ä–æ—Ñ–∏–ª–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        return
    
    text = "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏:\n\n"
    for key, profile in parsing_profiles.items():
        text += f"üî∏ `{key}` - {profile['name']}\n"
    
    await message.reply(text, parse_mode="Markdown")

@dp.message(Command("parse"))
async def cmd_parse(message: types.Message):
    if not is_admin(message.from_user.id):
        return
    
    args = message.text.split(" ", 1)
    if len(args) < 2:
        await message.reply("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /parse <url>")
        return
    
    url = args[1]
    await message.reply(f"üîÑ –ü–∞—Ä—Å–∏–º {url}...")
    
    try:
        async with UniversalParser() as parser:
            results = await parser.parse_url(url)
        
        if results:
            save_results("manual_parse", results)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            preview = results[:5]
            text = f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(results)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤\n\n"
            text += json.dumps(preview, ensure_ascii=False, indent=2)
            
            if len(text) > 4000:
                text = text[:3900] + "..."
            
            await message.reply(f"``````", parse_mode="Markdown")
        else:
            await message.reply("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@dp.message(Command("tip_send"))
async def cmd_tip_send(message: types.Message):
    args = message.text.split(" ", 1)
    if len(args) < 2 or not args[1].strip():
        await message.reply("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /tip_send <—Ç–µ–∫—Å—Ç —Å–æ–≤–µ—Ç–∞>")
        return

    register_subscriber(message.chat.id)

    with SessionLocal() as session:
        tip = create_tip(
            session,
            author_id=message.from_user.id,
            author_username=message.from_user.username,
            content=args[1],
            approved=is_admin(message.from_user.id),
        )

        if tip.is_approved:
            await broadcast_tip(tip, origin_chat_id=message.chat.id)
            await message.reply("‚úÖ –°–æ–≤–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω")
        else:
            await notify_admins_about_tip(tip)
            await message.reply("üïí –°–æ–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é")


@dp.message(Command("tip_best"))
async def cmd_tip_best(message: types.Message):
    register_subscriber(message.chat.id)

    with SessionLocal() as session:
        tips = get_top_tips(session, limit=5)

    if not tips:
        await message.reply("‚ùå –ü–æ–¥—Ö–æ–¥—è—â–∏–µ —Å–æ–≤–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return

    lines = ["üî• –õ—É—á—à–∏–µ –ª–∞–π—Ñ—Ö–∞–∫–∏:"]
    for index, tip in enumerate(tips, start=1):
        lines.append(f"{index}. {tip.content} ‚Äî —Ä–µ–π—Ç–∏–Ω–≥ {tip.rating}")

    await message.reply("\n".join(lines))


@dp.message(Command("tip_archive"))
async def cmd_tip_archive(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.reply("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        return

    args = message.text.split()
    if len(args) < 2:
        await message.reply("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /tip_archive <id> [on|off]")
        return

    try:
        tip_id = int(args[1])
    except ValueError:
        await message.reply("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        return

    state = True
    if len(args) >= 3:
        flag = args[2].lower()
        if flag in {"off", "0", "false"}:
            state = False

    with SessionLocal() as session:
        try:
            tip = archive_tip(session, tip_id, value=state)
        except Exception as exc:
            await message.reply(f"‚ùå {exc}")
            return

    status = "–≤ –∞—Ä—Ö–∏–≤–µ" if tip.is_archived else "–∞–∫—Ç–∏–≤–µ–Ω"
    await message.reply(f"‚ÑπÔ∏è –°–æ–≤–µ—Ç #{tip.id} —Ç–µ–ø–µ—Ä—å {status}")


@dp.callback_query(F.data.startswith("tip_"))
async def tip_callback_handler(callback: CallbackQuery):
    data = callback.data.split(":")

    if data[0] == "tip_like":
        tip_id = int(data[1])
        value = int(data[2])

        with SessionLocal() as session:
            try:
                tip = record_feedback(session, tip_id, callback.from_user.id, value)
            except Exception as exc:
                await callback.answer(str(exc), show_alert=True)
                return

        await callback.answer(f"–¢–µ–∫—É—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {tip.rating}")
        try:
            await callback.message.edit_text(
                format_tip_message(tip), reply_markup=tip_rating_keyboard(tip.id)
            )
        except TelegramBadRequest:
            pass

    elif data[0] == "tip_moderate":
        action = data[1]
        tip_id = int(data[2])

        if not is_admin(callback.from_user.id):
            await callback.answer("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –º–æ–¥–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", show_alert=True)
            return

        with SessionLocal() as session:
            try:
                if action == "approve":
                    tip = approve_tip(session, tip_id)
                else:
                    tip = reject_tip(session, tip_id)
            except Exception as exc:
                await callback.answer(str(exc), show_alert=True)
                return

        if action == "approve":
            await callback.answer("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ")
            await broadcast_tip(tip)
        else:
            await callback.answer("üö´ –û—Ç–∫–ª–æ–Ω–µ–Ω–æ")
            try:
                await callback.message.edit_reply_markup(reply_markup=None)
            except TelegramBadRequest:
                pass

@dp.message(Command("run"))
async def cmd_run(message: types.Message):
    if not is_admin(message.from_user.id):
        return
    
    args = message.text.split(" ", 1)
    if len(args) < 2:
        await message.reply("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /run <profile_name>")
        return
    
    profile_name = args[1]
    
    if profile_name not in parsing_profiles:
        await message.reply(f"‚ùå –ü—Ä–æ—Ñ–∏–ª—å '{profile_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    await message.reply(f"üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å '{profile_name}'...")
    
    try:
        async with UniversalParser() as parser:
            results = await parser.parse_by_profile(profile_name)
        
        if results:
            save_results(profile_name, results)
            
            text = f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å '{profile_name}' –≤—ã–ø–æ–ª–Ω–µ–Ω\n"
            text += f"–ù–∞–π–¥–µ–Ω–æ: {len(results)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤\n\n"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
            for i, result in enumerate(results[:3]):
                text += f"{i+1}. {json.dumps(result, ensure_ascii=False)}\n"
            
            if len(results) > 3:
                text += f"... –∏ –µ—â—ë {len(results)-3} —ç–ª–µ–º–µ–Ω—Ç–æ–≤"
            
            await message.reply(text)
        else:
            await message.reply("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

@dp.message(Command("results"))
async def cmd_results(message: types.Message):
    if not is_admin(message.from_user.id):
        return
    
    results = get_recent_results(limit=100)
    
    if not results:
        await message.reply("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    text = f"üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:\n\n"
    
    for result in results[:10]:
        text += f"üî∏ {result['timestamp']} - {result['profile_name']}: {result['count']} —ç–ª–µ–º–µ–Ω—Ç–æ–≤\n"
    
    await message.reply(text)

@dp.message(Command("export"))
async def cmd_export(message: types.Message):
    if not is_admin(message.from_user.id):
        return
    
    results = get_recent_results(limit=1000)
    
    if not results:
        await message.reply("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
        return
    
    # –°–æ–∑–¥–∞—ë–º Excel —Ñ–∞–π–ª
    df = pd.DataFrame(results)
    
    buffer = io.BytesIO()
    with pd.ExcelWriter(buffer, engine='openpyxl') as writer:
        df.to_excel(writer, index=False, sheet_name='Results')
    
    buffer.seek(0)
    
    file = BufferedInputFile(buffer.read(), filename="parsing_results.xlsx")
    await message.reply_document(file, caption=f"üìà –≠–∫—Å–ø–æ—Ä—Ç: {len(results)} –∑–∞–ø–∏—Å–µ–π")

async def start_bot():
    print("ü§ñ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    digest_task = asyncio.create_task(weekly_digest_worker())
    try:
        await dp.start_polling(bot)
    finally:
        digest_task.cancel()
        with contextlib.suppress(asyncio.CancelledError):
            await digest_task

if __name__ == "__main__":
    asyncio.run(start_bot())
