import asyncio
import json
import io
from typing import Any, Dict, List, Optional

import pandas as pd
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import (
    BufferedInputFile,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from urllib.parse import quote_plus, unquote_plus

from config import settings, parsing_profiles
from parser import UniversalParser
from db import save_results, get_recent_results
from navigator.suppliers import search_suppliers, OPEN_CATALOGS
from navigator.guides import get_section, get_paginated_faq
from navigator.logistics import Carrier, find_carriers, initialise_storage

bot = Bot(token=settings.TELEGRAM_BOT_TOKEN)
dp = Dispatcher()

SUPPLIERS_PAGE_SIZE = 5
LOGISTICS_PAGE_SIZE = 5
FAQ_PAGE_SIZE = 2


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
def is_admin(user_id: int) -> bool:
    return user_id == settings.TELEGRAM_CHAT_ID or user_id in settings.ADMIN_CHAT_IDS


def _make_callback(prefix: str, page: int, *parts: str) -> str:
    encoded = [quote_plus(str(page))]
    encoded.extend(quote_plus(part or "") for part in parts)
    return "|".join([prefix, *encoded])


def _parse_callback(data: str) -> tuple[str, int, list[str]]:
    parts = data.split("|")
    prefix = parts[0]
    if len(parts) < 2:
        return prefix, 1, []
    page = int(unquote_plus(parts[1])) if parts[1] else 1
    payload = [unquote_plus(part) for part in parts[2:]] if len(parts) > 2 else []
    return prefix, max(1, page), payload


def _build_pagination_keyboard(
    prefix: str, page: int, has_prev: bool, has_next: bool, payload: list[str]
) -> Optional[InlineKeyboardMarkup]:
    buttons = []
    if has_prev:
        buttons.append(
            InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                callback_data=_make_callback(prefix, page - 1, *payload),
            )
        )
    if has_next:
        buttons.append(
            InlineKeyboardButton(
                text="‚û°Ô∏è –í–ø–µ—Ä—ë–¥",
                callback_data=_make_callback(prefix, page + 1, *payload),
            )
        )
    if not buttons:
        return None
    return InlineKeyboardMarkup(inline_keyboard=[buttons])


def _format_supplier_item(item: Dict[str, Any]) -> str:
    name = item.get("name") or item.get("title") or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
    parts = [f"üè∑Ô∏è {name}"]
    if item.get("category"):
        parts.append(f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {item['category']}")
    if item.get("location"):
        parts.append(f"üìç –ì–æ—Ä–æ–¥: {item['location']}")
    if item.get("phone"):
        parts.append(f"‚òéÔ∏è –¢–µ–ª–µ—Ñ–æ–Ω: {item['phone']}")
    if item.get("website"):
        parts.append(f"üåê {item['website']}")
    return "\n".join(parts)


def _format_carrier_item(carrier: Carrier) -> str:
    parts = [f"üöö {carrier.name}"]
    if carrier.regions:
        parts.append(f"üó∫Ô∏è –†–µ–≥–∏–æ–Ω—ã: {', '.join(carrier.regions)}")
    if carrier.vehicle_types:
        parts.append(f"üöõ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: {', '.join(carrier.vehicle_types)}")
    if carrier.phone:
        parts.append(f"‚òéÔ∏è {carrier.phone}")
    if carrier.email:
        parts.append(f"‚úâÔ∏è {carrier.email}")
    if carrier.rating is not None:
        parts.append(f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {carrier.rating:.1f}")
    return "\n".join(parts)


def _format_section(key: str) -> str:
    section = get_section(key)
    header = f"üìò {section.title} (–æ–±–Ω–æ–≤–ª–µ–Ω–æ {section.updated_at:%d.%m.%Y %H:%M} UTC)"
    return "\n\n".join([header, "\n".join(section.content)])


async def _send_supplier_results(
    message: types.Message,
    query: str,
    source: str,
    page: int,
    *,
    edit: bool = False,
) -> None:
    try:
        result = await search_suppliers(
            query=query,
            source_name=source,
            page=page,
            limit=SUPPLIERS_PAGE_SIZE + 1,
        )
    except KeyError:
        text = f"‚ùå –ò—Å—Ç–æ—á–Ω–∏–∫ '{source}' –Ω–µ –Ω–∞–π–¥–µ–Ω."
        keyboard = None
    except Exception as exc:
        text = f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤: {exc}"
        keyboard = None
    else:
        items = result.results[:SUPPLIERS_PAGE_SIZE]
        has_more = len(result.results) > SUPPLIERS_PAGE_SIZE
        has_prev = page > 1
        keyboard = _build_pagination_keyboard(
            "sup", page, has_prev, has_more, [source, query]
        )
        if items:
            offset = (page - 1) * SUPPLIERS_PAGE_SIZE
            body = []
            for idx, item in enumerate(items, start=1):
                body.append(f"{offset + idx}. {_format_supplier_item(item)}")
            text = (
                f"üì¶ –ò—Å—Ç–æ—á–Ω–∏–∫: {source}\n"
                f"üîé –ó–∞–ø—Ä–æ—Å: {query}\n"
                f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}\n\n"
                + "\n\n".join(body)
            )
        else:
            text = f"‚ö†Ô∏è –ü–æ –∑–∞–ø—Ä–æ—Å—É '{query}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
            keyboard = None

    if edit:
        await message.edit_text(text, reply_markup=keyboard, disable_web_page_preview=True)
    else:
        await message.reply(text, reply_markup=keyboard, disable_web_page_preview=True)


async def _send_logistics_results(
    message: types.Message,
    query: Optional[str],
    regions: List[str],
    min_rating: Optional[float],
    page: int,
    *,
    edit: bool = False,
) -> None:
    initialise_storage()
    carriers = find_carriers(
        query=query,
        regions=regions or None,
        min_rating=min_rating,
        limit=LOGISTICS_PAGE_SIZE + 1,
        offset=(page - 1) * LOGISTICS_PAGE_SIZE,
    )
    items = carriers[:LOGISTICS_PAGE_SIZE]
    has_more = len(carriers) > LOGISTICS_PAGE_SIZE
    has_prev = page > 1
    payload = [query or "", ",".join(regions), str(min_rating or "")]
    keyboard = _build_pagination_keyboard("log", page, has_prev, has_more, payload)

    if items:
        offset = (page - 1) * LOGISTICS_PAGE_SIZE
        body = []
        for idx, carrier in enumerate(items, start=1):
            body.append(f"{offset + idx}. {_format_carrier_item(carrier)}")
        filters = ["üöö –ö–∞—Ç–∞–ª–æ–≥ –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–æ–≤"]
        if query:
            filters.append(f"üîç –ò–º—è —Å–æ–¥–µ—Ä–∂–∏—Ç: {query}")
        if regions:
            filters.append(f"üåç –†–µ–≥–∏–æ–Ω—ã: {', '.join(regions)}")
        if min_rating is not None:
            filters.append(f"‚≠ê –†–µ–π—Ç–∏–Ω–≥ –æ—Ç {min_rating}")
        text = "\n".join(filters) + "\n\n" + "\n\n".join(body)
    else:
        text = "‚ö†Ô∏è –ü–µ—Ä–µ–≤–æ–∑—á–∏–∫–∏ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º —É—Å–ª–æ–≤–∏—è–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
        keyboard = None

    if edit:
        await message.edit_text(text, reply_markup=keyboard, disable_web_page_preview=True)
    else:
        await message.reply(text, reply_markup=keyboard, disable_web_page_preview=True)


async def _send_faq(message: types.Message, page: int, *, edit: bool = False) -> None:
    items, total_pages = get_paginated_faq(page=page, per_page=FAQ_PAGE_SIZE)
    if not items and total_pages and page > total_pages:
        items, total_pages = get_paginated_faq(page=total_pages, per_page=FAQ_PAGE_SIZE)
        page = total_pages

    has_prev = page > 1
    has_next = page < total_pages
    keyboard = _build_pagination_keyboard("faq", page, has_prev, has_next, [])

    if items:
        pairs = []
        for idx in range(0, len(items), 2):
            question = items[idx]
            answer = items[idx + 1] if idx + 1 < len(items) else ""
            pairs.append(f"‚ùì {question}\nüí° {answer}")
        text = "üìö FAQ\n\n" + "\n\n".join(pairs) + f"\n\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages}"
    else:
        text = "FAQ –ø–æ–∫–∞ –ø—É—Å—Ç."

    if edit:
        await message.edit_text(text, reply_markup=keyboard, disable_web_page_preview=True)
    else:
        await message.reply(text, reply_markup=keyboard, disable_web_page_preview=True)

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.reply("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        return
    
    await message.reply(
        "üöÄ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –∑–∞–ø—É—â–µ–Ω!\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/profiles - —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Ñ–∏–ª–µ–π\n"
        "/parse <url> - –ø–∞—Ä—Å–∏—Ç—å URL\n"
        "/run <profile> - –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å\n"
        "/results - –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã\n"
        "/export - —ç–∫—Å–ø–æ—Ä—Ç –≤ Excel/CSV"
    )

@dp.message(Command("profiles"))
async def cmd_profiles(message: types.Message):
    if not is_admin(message.from_user.id):
        return

    if not parsing_profiles:
        await message.reply("‚ùå –ü—Ä–æ—Ñ–∏–ª–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        return
    
    text = "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏:\n\n"
    for key, profile in parsing_profiles.items():
        text += f"üî∏ `{key}` - {profile['name']}\n"
    
    await message.reply(text, parse_mode="Markdown")


@dp.message(Command("quickstart"))
async def cmd_quickstart(message: types.Message):
    if not is_admin(message.from_user.id):
        return

    await message.reply(_format_section("quickstart"))


@dp.message(Command("roadmap"))
async def cmd_roadmap(message: types.Message):
    if not is_admin(message.from_user.id):
        return

    await message.reply(_format_section("roadmap"))


@dp.message(Command("faq"))
async def cmd_faq(message: types.Message):
    if not is_admin(message.from_user.id):
        return

    await _send_faq(message, page=1)


@dp.callback_query(F.data.startswith("faq|"))
async def pagination_faq(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    _, page, _ = _parse_callback(callback.data)
    await _send_faq(callback.message, page=page, edit=True)
    await callback.answer()

@dp.message(Command("parse"))
async def cmd_parse(message: types.Message):
    if not is_admin(message.from_user.id):
        return
    
    args = message.text.split(" ", 1)
    if len(args) < 2:
        await message.reply("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /parse <url>")
        return
    
    url = args[1]
    await message.reply(f"üîÑ –ü–∞—Ä—Å–∏–º {url}...")
    
    try:
        async with UniversalParser() as parser:
            results = await parser.parse_url(url)
        
        if results:
            save_results("manual_parse", results)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            preview = results[:5]
            text = f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(results)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤\n\n"
            text += json.dumps(preview, ensure_ascii=False, indent=2)
            
            if len(text) > 4000:
                text = text[:3900] + "..."
            
            await message.reply(f"``````", parse_mode="Markdown")
        else:
            await message.reply("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@dp.message(Command("suppliers"))
async def cmd_suppliers(message: types.Message):
    if not is_admin(message.from_user.id):
        return

    if not OPEN_CATALOGS:
        await message.reply("‚ùå –ö–∞—Ç–∞–ª–æ–≥–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        return

    args = message.text.split(" ", 1)
    if len(args) < 2 or not args[1].strip():
        catalogs_list = ", ".join(OPEN_CATALOGS.keys())
        await message.reply(
            "‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /suppliers <–∑–∞–ø—Ä–æ—Å> –∏–ª–∏ /suppliers <–∏—Å—Ç–æ—á–Ω–∏–∫>;<–∑–∞–ø—Ä–æ—Å>\n"
            f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏: {catalogs_list}"
        )
        return

    raw = args[1].strip()
    if ";" in raw:
        source_name, query = [part.strip() for part in raw.split(";", 1)]
        if not source_name:
            source_name = next(iter(OPEN_CATALOGS))
    else:
        source_name = next(iter(OPEN_CATALOGS))
        query = raw

    await _send_supplier_results(message, query=query, source=source_name, page=1)


@dp.callback_query(F.data.startswith("sup|"))
async def pagination_suppliers(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    _, page, payload = _parse_callback(callback.data)
    source = payload[0] if payload else next(iter(OPEN_CATALOGS))
    query = payload[1] if len(payload) > 1 else ""
    await _send_supplier_results(callback.message, query=query, source=source, page=page, edit=True)
    await callback.answer()

@dp.message(Command("run"))
async def cmd_run(message: types.Message):
    if not is_admin(message.from_user.id):
        return
    
    args = message.text.split(" ", 1)
    if len(args) < 2:
        await message.reply("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /run <profile_name>")
        return
    
    profile_name = args[1]
    
    if profile_name not in parsing_profiles:
        await message.reply(f"‚ùå –ü—Ä–æ—Ñ–∏–ª—å '{profile_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    await message.reply(f"üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å '{profile_name}'...")
    
    try:
        async with UniversalParser() as parser:
            results = await parser.parse_by_profile(profile_name)
        
        if results:
            save_results(profile_name, results)
            
            text = f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å '{profile_name}' –≤—ã–ø–æ–ª–Ω–µ–Ω\n"
            text += f"–ù–∞–π–¥–µ–Ω–æ: {len(results)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤\n\n"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
            for i, result in enumerate(results[:3]):
                text += f"{i+1}. {json.dumps(result, ensure_ascii=False)}\n"
            
            if len(results) > 3:
                text += f"... –∏ –µ—â—ë {len(results)-3} —ç–ª–µ–º–µ–Ω—Ç–æ–≤"
            
            await message.reply(text)
        else:
            await message.reply("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@dp.message(Command("logistics"))
async def cmd_logistics(message: types.Message):
    if not is_admin(message.from_user.id):
        return

    args = message.text.split(" ", 1)
    query = None
    regions: List[str] = []
    min_rating: Optional[float] = None

    if len(args) > 1 and args[1].strip():
        parts = [part.strip() for part in args[1].split(";")]
        if parts:
            query = parts[0] or None
        if len(parts) > 1 and parts[1]:
            regions = [region.strip() for region in parts[1].split(",") if region.strip()]
        if len(parts) > 2 and parts[2]:
            try:
                min_rating = float(parts[2].replace(",", "."))
            except ValueError:
                await message.reply("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ.")
                return
    else:
        await message.reply(
            "‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /logistics <–Ω–∞–∑–≤–∞–Ω–∏–µ>;<—Ä–µ–≥–∏–æ–Ω—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é>;<–º–∏–Ω. —Ä–µ–π—Ç–∏–Ω–≥>"
        )
        return

    await _send_logistics_results(message, query=query, regions=regions, min_rating=min_rating, page=1)


@dp.callback_query(F.data.startswith("log|"))
async def pagination_logistics(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    _, page, payload = _parse_callback(callback.data)
    query = payload[0] if payload else None
    regions = payload[1].split(",") if len(payload) > 1 and payload[1] else []
    rating_value = payload[2] if len(payload) > 2 else ""
    try:
        min_rating = float(rating_value) if rating_value else None
    except ValueError:
        min_rating = None
    await _send_logistics_results(
        callback.message,
        query=query or None,
        regions=[region for region in regions if region],
        min_rating=min_rating,
        page=page,
        edit=True,
    )
    await callback.answer()

@dp.message(Command("results"))
async def cmd_results(message: types.Message):
    if not is_admin(message.from_user.id):
        return
    
    results = get_recent_results(limit=100)
    
    if not results:
        await message.reply("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    text = f"üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:\n\n"
    
    for result in results[:10]:
        text += f"üî∏ {result['timestamp']} - {result['profile_name']}: {result['count']} —ç–ª–µ–º–µ–Ω—Ç–æ–≤\n"
    
    await message.reply(text)

@dp.message(Command("export"))
async def cmd_export(message: types.Message):
    if not is_admin(message.from_user.id):
        return
    
    results = get_recent_results(limit=1000)
    
    if not results:
        await message.reply("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
        return
    
    # –°–æ–∑–¥–∞—ë–º Excel —Ñ–∞–π–ª
    df = pd.DataFrame(results)
    
    buffer = io.BytesIO()
    with pd.ExcelWriter(buffer, engine='openpyxl') as writer:
        df.to_excel(writer, index=False, sheet_name='Results')
    
    buffer.seek(0)
    
    file = BufferedInputFile(buffer.read(), filename="parsing_results.xlsx")
    await message.reply_document(file, caption=f"üìà –≠–∫—Å–ø–æ—Ä—Ç: {len(results)} –∑–∞–ø–∏—Å–µ–π")

async def start_bot():
    print("ü§ñ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(start_bot())
